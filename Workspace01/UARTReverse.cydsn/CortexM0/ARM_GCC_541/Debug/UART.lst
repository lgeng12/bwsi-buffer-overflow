ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"UART.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	UART_initVar
  20              		.bss
  21              		.type	UART_initVar, %object
  22              		.size	UART_initVar, 1
  23              	UART_initVar:
  24 0000 00       		.space	1
  25              		.section	.text.UART_Start,"ax",%progbits
  26              		.align	2
  27              		.global	UART_Start
  28              		.code	16
  29              		.thumb_func
  30              		.type	UART_Start, %function
  31              	UART_Start:
  32              	.LFB0:
  33              		.file 1 "Generated_Source\\PSoC4\\UART.c"
   1:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/UART.c **** * File Name: UART.c
   3:Generated_Source\PSoC4/UART.c **** * Version 2.50
   4:Generated_Source\PSoC4/UART.c **** *
   5:Generated_Source\PSoC4/UART.c **** * Description:
   6:Generated_Source\PSoC4/UART.c **** *  This file provides all API functionality of the UART component
   7:Generated_Source\PSoC4/UART.c **** *
   8:Generated_Source\PSoC4/UART.c **** * Note:
   9:Generated_Source\PSoC4/UART.c **** *
  10:Generated_Source\PSoC4/UART.c **** ********************************************************************************
  11:Generated_Source\PSoC4/UART.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC4/UART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:Generated_Source\PSoC4/UART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:Generated_Source\PSoC4/UART.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
  16:Generated_Source\PSoC4/UART.c **** 
  17:Generated_Source\PSoC4/UART.c **** #include "UART.h"
  18:Generated_Source\PSoC4/UART.c **** #if (UART_INTERNAL_CLOCK_USED)
  19:Generated_Source\PSoC4/UART.c ****     #include "UART_IntClock.h"
  20:Generated_Source\PSoC4/UART.c **** #endif /* End UART_INTERNAL_CLOCK_USED */
  21:Generated_Source\PSoC4/UART.c **** 
  22:Generated_Source\PSoC4/UART.c **** 
  23:Generated_Source\PSoC4/UART.c **** /***************************************
  24:Generated_Source\PSoC4/UART.c **** * Global data allocation
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 2


  25:Generated_Source\PSoC4/UART.c **** ***************************************/
  26:Generated_Source\PSoC4/UART.c **** 
  27:Generated_Source\PSoC4/UART.c **** uint8 UART_initVar = 0u;
  28:Generated_Source\PSoC4/UART.c **** 
  29:Generated_Source\PSoC4/UART.c **** #if (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED)
  30:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_txBuffer[UART_TX_BUFFER_SIZE];
  31:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_txBufferRead = 0u;
  32:Generated_Source\PSoC4/UART.c ****     uint8 UART_txBufferWrite = 0u;
  33:Generated_Source\PSoC4/UART.c **** #endif /* (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED) */
  34:Generated_Source\PSoC4/UART.c **** 
  35:Generated_Source\PSoC4/UART.c **** #if (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED))
  36:Generated_Source\PSoC4/UART.c ****     uint8 UART_errorStatus = 0u;
  37:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_rxBuffer[UART_RX_BUFFER_SIZE];
  38:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_rxBufferRead  = 0u;
  39:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_rxBufferWrite = 0u;
  40:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_rxBufferLoopDetect = 0u;
  41:Generated_Source\PSoC4/UART.c ****     volatile uint8 UART_rxBufferOverflow   = 0u;
  42:Generated_Source\PSoC4/UART.c ****     #if (UART_RXHW_ADDRESS_ENABLED)
  43:Generated_Source\PSoC4/UART.c ****         volatile uint8 UART_rxAddressMode = UART_RX_ADDRESS_MODE;
  44:Generated_Source\PSoC4/UART.c ****         volatile uint8 UART_rxAddressDetected = 0u;
  45:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RXHW_ADDRESS_ENABLED) */
  46:Generated_Source\PSoC4/UART.c **** #endif /* (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED)) */
  47:Generated_Source\PSoC4/UART.c **** 
  48:Generated_Source\PSoC4/UART.c **** 
  49:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
  50:Generated_Source\PSoC4/UART.c **** * Function Name: UART_Start
  51:Generated_Source\PSoC4/UART.c **** ********************************************************************************
  52:Generated_Source\PSoC4/UART.c **** *
  53:Generated_Source\PSoC4/UART.c **** * Summary:
  54:Generated_Source\PSoC4/UART.c **** *  This is the preferred method to begin component operation.
  55:Generated_Source\PSoC4/UART.c **** *  UART_Start() sets the initVar variable, calls the
  56:Generated_Source\PSoC4/UART.c **** *  UART_Init() function, and then calls the
  57:Generated_Source\PSoC4/UART.c **** *  UART_Enable() function.
  58:Generated_Source\PSoC4/UART.c **** *
  59:Generated_Source\PSoC4/UART.c **** * Parameters:
  60:Generated_Source\PSoC4/UART.c **** *  None.
  61:Generated_Source\PSoC4/UART.c **** *
  62:Generated_Source\PSoC4/UART.c **** * Return:
  63:Generated_Source\PSoC4/UART.c **** *  None.
  64:Generated_Source\PSoC4/UART.c **** *
  65:Generated_Source\PSoC4/UART.c **** * Global variables:
  66:Generated_Source\PSoC4/UART.c **** *  The UART_intiVar variable is used to indicate initial
  67:Generated_Source\PSoC4/UART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:Generated_Source\PSoC4/UART.c **** *  and set to one (1u) the first time UART_Start() is called. This
  69:Generated_Source\PSoC4/UART.c **** *  allows for component initialization without re-initialization in all
  70:Generated_Source\PSoC4/UART.c **** *  subsequent calls to the UART_Start() routine.
  71:Generated_Source\PSoC4/UART.c **** *
  72:Generated_Source\PSoC4/UART.c **** * Reentrant:
  73:Generated_Source\PSoC4/UART.c **** *  No.
  74:Generated_Source\PSoC4/UART.c **** *
  75:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
  76:Generated_Source\PSoC4/UART.c **** void UART_Start(void) 
  77:Generated_Source\PSoC4/UART.c **** {
  34              		.loc 1 77 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 3


  38 0000 80B5     		push	{r7, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  78:Generated_Source\PSoC4/UART.c ****     /* If not initialized then initialize all required hardware and software */
  79:Generated_Source\PSoC4/UART.c ****     if(UART_initVar == 0u)
  44              		.loc 1 79 0
  45 0004 064B     		ldr	r3, .L3
  46 0006 1B78     		ldrb	r3, [r3]
  47 0008 002B     		cmp	r3, #0
  48 000a 04D1     		bne	.L2
  80:Generated_Source\PSoC4/UART.c ****     {
  81:Generated_Source\PSoC4/UART.c ****         UART_Init();
  49              		.loc 1 81 0
  50 000c FFF7FEFF 		bl	UART_Init
  82:Generated_Source\PSoC4/UART.c ****         UART_initVar = 1u;
  51              		.loc 1 82 0
  52 0010 034B     		ldr	r3, .L3
  53 0012 0122     		movs	r2, #1
  54 0014 1A70     		strb	r2, [r3]
  55              	.L2:
  83:Generated_Source\PSoC4/UART.c ****     }
  84:Generated_Source\PSoC4/UART.c **** 
  85:Generated_Source\PSoC4/UART.c ****     UART_Enable();
  56              		.loc 1 85 0
  57 0016 FFF7FEFF 		bl	UART_Enable
  86:Generated_Source\PSoC4/UART.c **** }
  58              		.loc 1 86 0
  59 001a C046     		nop
  60 001c BD46     		mov	sp, r7
  61              		@ sp needed
  62 001e 80BD     		pop	{r7, pc}
  63              	.L4:
  64              		.align	2
  65              	.L3:
  66 0020 00000000 		.word	UART_initVar
  67              		.cfi_endproc
  68              	.LFE0:
  69              		.size	UART_Start, .-UART_Start
  70              		.section	.text.UART_Init,"ax",%progbits
  71              		.align	2
  72              		.global	UART_Init
  73              		.code	16
  74              		.thumb_func
  75              		.type	UART_Init, %function
  76              	UART_Init:
  77              	.LFB1:
  87:Generated_Source\PSoC4/UART.c **** 
  88:Generated_Source\PSoC4/UART.c **** 
  89:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
  90:Generated_Source\PSoC4/UART.c **** * Function Name: UART_Init
  91:Generated_Source\PSoC4/UART.c **** ********************************************************************************
  92:Generated_Source\PSoC4/UART.c **** *
  93:Generated_Source\PSoC4/UART.c **** * Summary:
  94:Generated_Source\PSoC4/UART.c **** *  Initializes or restores the component according to the customizer Configure
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 4


  95:Generated_Source\PSoC4/UART.c **** *  dialog settings. It is not necessary to call UART_Init() because
  96:Generated_Source\PSoC4/UART.c **** *  the UART_Start() API calls this function and is the preferred
  97:Generated_Source\PSoC4/UART.c **** *  method to begin component operation.
  98:Generated_Source\PSoC4/UART.c **** *
  99:Generated_Source\PSoC4/UART.c **** * Parameters:
 100:Generated_Source\PSoC4/UART.c **** *  None.
 101:Generated_Source\PSoC4/UART.c **** *
 102:Generated_Source\PSoC4/UART.c **** * Return:
 103:Generated_Source\PSoC4/UART.c **** *  None.
 104:Generated_Source\PSoC4/UART.c **** *
 105:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
 106:Generated_Source\PSoC4/UART.c **** void UART_Init(void) 
 107:Generated_Source\PSoC4/UART.c **** {
  78              		.loc 1 107 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82 0000 80B5     		push	{r7, lr}
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
 108:Generated_Source\PSoC4/UART.c ****     #if(UART_RX_ENABLED || UART_HD_ENABLED)
 109:Generated_Source\PSoC4/UART.c **** 
 110:Generated_Source\PSoC4/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 111:Generated_Source\PSoC4/UART.c ****             /* Set RX interrupt vector and priority */
 112:Generated_Source\PSoC4/UART.c ****             (void) CyIntSetVector(UART_RX_VECT_NUM, &UART_RXISR);
 113:Generated_Source\PSoC4/UART.c ****             CyIntSetPriority(UART_RX_VECT_NUM, UART_RX_PRIOR_NUM);
 114:Generated_Source\PSoC4/UART.c ****             UART_errorStatus = 0u;
 115:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 116:Generated_Source\PSoC4/UART.c **** 
 117:Generated_Source\PSoC4/UART.c ****         #if (UART_RXHW_ADDRESS_ENABLED)
 118:Generated_Source\PSoC4/UART.c ****             UART_SetRxAddressMode(UART_RX_ADDRESS_MODE);
 119:Generated_Source\PSoC4/UART.c ****             UART_SetRxAddress1(UART_RX_HW_ADDRESS1);
 120:Generated_Source\PSoC4/UART.c ****             UART_SetRxAddress2(UART_RX_HW_ADDRESS2);
 121:Generated_Source\PSoC4/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 122:Generated_Source\PSoC4/UART.c **** 
 123:Generated_Source\PSoC4/UART.c ****         /* Init Count7 period */
 124:Generated_Source\PSoC4/UART.c ****         UART_RXBITCTR_PERIOD_REG = UART_RXBITCTR_INIT;
  88              		.loc 1 124 0
  89 0004 084B     		ldr	r3, .L6
  90 0006 7222     		movs	r2, #114
  91 0008 1A70     		strb	r2, [r3]
 125:Generated_Source\PSoC4/UART.c ****         /* Configure the Initial RX interrupt mask */
 126:Generated_Source\PSoC4/UART.c ****         UART_RXSTATUS_MASK_REG  = UART_INIT_RX_INTERRUPTS_MASK;
  92              		.loc 1 126 0
  93 000a 084B     		ldr	r3, .L6+4
  94 000c 0022     		movs	r2, #0
  95 000e 1A70     		strb	r2, [r3]
 127:Generated_Source\PSoC4/UART.c ****     #endif /* End UART_RX_ENABLED || UART_HD_ENABLED*/
 128:Generated_Source\PSoC4/UART.c **** 
 129:Generated_Source\PSoC4/UART.c ****     #if(UART_TX_ENABLED)
 130:Generated_Source\PSoC4/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 131:Generated_Source\PSoC4/UART.c ****             /* Set TX interrupt vector and priority */
 132:Generated_Source\PSoC4/UART.c ****             (void) CyIntSetVector(UART_TX_VECT_NUM, &UART_TXISR);
 133:Generated_Source\PSoC4/UART.c ****             CyIntSetPriority(UART_TX_VECT_NUM, UART_TX_PRIOR_NUM);
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 5


 134:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 135:Generated_Source\PSoC4/UART.c **** 
 136:Generated_Source\PSoC4/UART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:Generated_Source\PSoC4/UART.c ****         #if (UART_TXCLKGEN_DP)
 138:Generated_Source\PSoC4/UART.c ****             UART_TXBITCLKGEN_CTR_REG = UART_BIT_CENTER;
  96              		.loc 1 138 0
  97 0010 074B     		ldr	r3, .L6+8
  98 0012 0622     		movs	r2, #6
  99 0014 1A70     		strb	r2, [r3]
 139:Generated_Source\PSoC4/UART.c ****             UART_TXBITCLKTX_COMPLETE_REG = ((UART_NUMBER_OF_DATA_BITS +
 100              		.loc 1 139 0
 101 0016 074B     		ldr	r3, .L6+12
 102 0018 4722     		movs	r2, #71
 103 001a 1A70     		strb	r2, [r3]
 140:Generated_Source\PSoC4/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_COUNT) - 1u;
 141:Generated_Source\PSoC4/UART.c ****         #else
 142:Generated_Source\PSoC4/UART.c ****             UART_TXBITCTR_PERIOD_REG = ((UART_NUMBER_OF_DATA_BITS +
 143:Generated_Source\PSoC4/UART.c ****                         UART_NUMBER_OF_START_BIT) * UART_OVER_SAMPLE_8) - 1u;
 144:Generated_Source\PSoC4/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 145:Generated_Source\PSoC4/UART.c **** 
 146:Generated_Source\PSoC4/UART.c ****         /* Configure the Initial TX interrupt mask */
 147:Generated_Source\PSoC4/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 148:Generated_Source\PSoC4/UART.c ****             UART_TXSTATUS_MASK_REG = UART_TX_STS_FIFO_EMPTY;
 149:Generated_Source\PSoC4/UART.c ****         #else
 150:Generated_Source\PSoC4/UART.c ****             UART_TXSTATUS_MASK_REG = UART_INIT_TX_INTERRUPTS_MASK;
 104              		.loc 1 150 0
 105 001c 064B     		ldr	r3, .L6+16
 106 001e 0022     		movs	r2, #0
 107 0020 1A70     		strb	r2, [r3]
 151:Generated_Source\PSoC4/UART.c ****         #endif /*End UART_TX_INTERRUPT_ENABLED*/
 152:Generated_Source\PSoC4/UART.c **** 
 153:Generated_Source\PSoC4/UART.c ****     #endif /* End UART_TX_ENABLED */
 154:Generated_Source\PSoC4/UART.c **** 
 155:Generated_Source\PSoC4/UART.c ****     #if(UART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:Generated_Source\PSoC4/UART.c ****         UART_WriteControlRegister( \
 157:Generated_Source\PSoC4/UART.c ****             (UART_ReadControlRegister() & (uint8)~UART_CTRL_PARITY_TYPE_MASK) | \
 158:Generated_Source\PSoC4/UART.c ****             (uint8)(UART_PARITY_TYPE << UART_CTRL_PARITY_TYPE0_SHIFT) );
 159:Generated_Source\PSoC4/UART.c ****     #endif /* End UART_PARITY_TYPE_SW */
 160:Generated_Source\PSoC4/UART.c **** }
 108              		.loc 1 160 0
 109 0022 C046     		nop
 110 0024 BD46     		mov	sp, r7
 111              		@ sp needed
 112 0026 80BD     		pop	{r7, pc}
 113              	.L7:
 114              		.align	2
 115              	.L6:
 116 0028 83000F40 		.word	1074724995
 117 002c 82000F40 		.word	1074724994
 118 0030 21000F40 		.word	1074724897
 119 0034 31000F40 		.word	1074724913
 120 0038 80000F40 		.word	1074724992
 121              		.cfi_endproc
 122              	.LFE1:
 123              		.size	UART_Init, .-UART_Init
 124              		.section	.text.UART_Enable,"ax",%progbits
 125              		.align	2
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 6


 126              		.global	UART_Enable
 127              		.code	16
 128              		.thumb_func
 129              		.type	UART_Enable, %function
 130              	UART_Enable:
 131              	.LFB2:
 161:Generated_Source\PSoC4/UART.c **** 
 162:Generated_Source\PSoC4/UART.c **** 
 163:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/UART.c **** * Function Name: UART_Enable
 165:Generated_Source\PSoC4/UART.c **** ********************************************************************************
 166:Generated_Source\PSoC4/UART.c **** *
 167:Generated_Source\PSoC4/UART.c **** * Summary:
 168:Generated_Source\PSoC4/UART.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:Generated_Source\PSoC4/UART.c **** *  to call UART_Enable() because the UART_Start() API
 170:Generated_Source\PSoC4/UART.c **** *  calls this function, which is the preferred method to begin component
 171:Generated_Source\PSoC4/UART.c **** *  operation.
 172:Generated_Source\PSoC4/UART.c **** 
 173:Generated_Source\PSoC4/UART.c **** * Parameters:
 174:Generated_Source\PSoC4/UART.c **** *  None.
 175:Generated_Source\PSoC4/UART.c **** *
 176:Generated_Source\PSoC4/UART.c **** * Return:
 177:Generated_Source\PSoC4/UART.c **** *  None.
 178:Generated_Source\PSoC4/UART.c **** *
 179:Generated_Source\PSoC4/UART.c **** * Global Variables:
 180:Generated_Source\PSoC4/UART.c **** *  UART_rxAddressDetected - set to initial state (0).
 181:Generated_Source\PSoC4/UART.c **** *
 182:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
 183:Generated_Source\PSoC4/UART.c **** void UART_Enable(void) 
 184:Generated_Source\PSoC4/UART.c **** {
 132              		.loc 1 184 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 8
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 0000 90B5     		push	{r4, r7, lr}
 137              		.cfi_def_cfa_offset 12
 138              		.cfi_offset 4, -12
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 0002 83B0     		sub	sp, sp, #12
 142              		.cfi_def_cfa_offset 24
 143 0004 00AF     		add	r7, sp, #0
 144              		.cfi_def_cfa_register 7
 185:Generated_Source\PSoC4/UART.c ****     uint8 enableInterrupts;
 186:Generated_Source\PSoC4/UART.c ****     enableInterrupts = CyEnterCriticalSection();
 145              		.loc 1 186 0
 146 0006 FC1D     		adds	r4, r7, #7
 147 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 148 000c 0300     		movs	r3, r0
 149 000e 2370     		strb	r3, [r4]
 187:Generated_Source\PSoC4/UART.c **** 
 188:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 189:Generated_Source\PSoC4/UART.c ****         /* RX Counter (Count7) Enable */
 190:Generated_Source\PSoC4/UART.c ****         UART_RXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 150              		.loc 1 190 0
 151 0010 114A     		ldr	r2, .L9
 152 0012 114B     		ldr	r3, .L9
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 7


 153 0014 1B78     		ldrb	r3, [r3]
 154 0016 DBB2     		uxtb	r3, r3
 155 0018 2021     		movs	r1, #32
 156 001a 0B43     		orrs	r3, r1
 157 001c DBB2     		uxtb	r3, r3
 158 001e 1370     		strb	r3, [r2]
 191:Generated_Source\PSoC4/UART.c **** 
 192:Generated_Source\PSoC4/UART.c ****         /* Enable the RX Interrupt */
 193:Generated_Source\PSoC4/UART.c ****         UART_RXSTATUS_ACTL_REG  |= UART_INT_ENABLE;
 159              		.loc 1 193 0
 160 0020 0E4A     		ldr	r2, .L9+4
 161 0022 0E4B     		ldr	r3, .L9+4
 162 0024 1B78     		ldrb	r3, [r3]
 163 0026 DBB2     		uxtb	r3, r3
 164 0028 1021     		movs	r1, #16
 165 002a 0B43     		orrs	r3, r1
 166 002c DBB2     		uxtb	r3, r3
 167 002e 1370     		strb	r3, [r2]
 194:Generated_Source\PSoC4/UART.c **** 
 195:Generated_Source\PSoC4/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 196:Generated_Source\PSoC4/UART.c ****             UART_EnableRxInt();
 197:Generated_Source\PSoC4/UART.c **** 
 198:Generated_Source\PSoC4/UART.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
 199:Generated_Source\PSoC4/UART.c ****                 UART_rxAddressDetected = 0u;
 200:Generated_Source\PSoC4/UART.c ****             #endif /* (UART_RXHW_ADDRESS_ENABLED) */
 201:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 202:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 203:Generated_Source\PSoC4/UART.c **** 
 204:Generated_Source\PSoC4/UART.c ****     #if(UART_TX_ENABLED)
 205:Generated_Source\PSoC4/UART.c ****         /* TX Counter (DP/Count7) Enable */
 206:Generated_Source\PSoC4/UART.c ****         #if(!UART_TXCLKGEN_DP)
 207:Generated_Source\PSoC4/UART.c ****             UART_TXBITCTR_CONTROL_REG |= UART_CNTR_ENABLE;
 208:Generated_Source\PSoC4/UART.c ****         #endif /* End UART_TXCLKGEN_DP */
 209:Generated_Source\PSoC4/UART.c **** 
 210:Generated_Source\PSoC4/UART.c ****         /* Enable the TX Interrupt */
 211:Generated_Source\PSoC4/UART.c ****         UART_TXSTATUS_ACTL_REG |= UART_INT_ENABLE;
 168              		.loc 1 211 0
 169 0030 0B4A     		ldr	r2, .L9+8
 170 0032 0B4B     		ldr	r3, .L9+8
 171 0034 1B78     		ldrb	r3, [r3]
 172 0036 DBB2     		uxtb	r3, r3
 173 0038 1021     		movs	r1, #16
 174 003a 0B43     		orrs	r3, r1
 175 003c DBB2     		uxtb	r3, r3
 176 003e 1370     		strb	r3, [r2]
 212:Generated_Source\PSoC4/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 213:Generated_Source\PSoC4/UART.c ****             UART_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:Generated_Source\PSoC4/UART.c ****             UART_EnableTxInt();
 215:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 216:Generated_Source\PSoC4/UART.c ****      #endif /* (UART_TX_INTERRUPT_ENABLED) */
 217:Generated_Source\PSoC4/UART.c **** 
 218:Generated_Source\PSoC4/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 219:Generated_Source\PSoC4/UART.c ****         UART_IntClock_Start();  /* Enable the clock */
 177              		.loc 1 219 0
 178 0040 FFF7FEFF 		bl	UART_IntClock_Start
 220:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 221:Generated_Source\PSoC4/UART.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 8


 222:Generated_Source\PSoC4/UART.c ****     CyExitCriticalSection(enableInterrupts);
 179              		.loc 1 222 0
 180 0044 FB1D     		adds	r3, r7, #7
 181 0046 1B78     		ldrb	r3, [r3]
 182 0048 1800     		movs	r0, r3
 183 004a FFF7FEFF 		bl	CyExitCriticalSection
 223:Generated_Source\PSoC4/UART.c **** }
 184              		.loc 1 223 0
 185 004e C046     		nop
 186 0050 BD46     		mov	sp, r7
 187 0052 03B0     		add	sp, sp, #12
 188              		@ sp needed
 189 0054 90BD     		pop	{r4, r7, pc}
 190              	.L10:
 191 0056 C046     		.align	2
 192              	.L9:
 193 0058 93000F40 		.word	1074725011
 194 005c 92000F40 		.word	1074725010
 195 0060 90000F40 		.word	1074725008
 196              		.cfi_endproc
 197              	.LFE2:
 198              		.size	UART_Enable, .-UART_Enable
 199              		.section	.text.UART_Stop,"ax",%progbits
 200              		.align	2
 201              		.global	UART_Stop
 202              		.code	16
 203              		.thumb_func
 204              		.type	UART_Stop, %function
 205              	UART_Stop:
 206              	.LFB3:
 224:Generated_Source\PSoC4/UART.c **** 
 225:Generated_Source\PSoC4/UART.c **** 
 226:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
 227:Generated_Source\PSoC4/UART.c **** * Function Name: UART_Stop
 228:Generated_Source\PSoC4/UART.c **** ********************************************************************************
 229:Generated_Source\PSoC4/UART.c **** *
 230:Generated_Source\PSoC4/UART.c **** * Summary:
 231:Generated_Source\PSoC4/UART.c **** *  Disables the UART operation.
 232:Generated_Source\PSoC4/UART.c **** *
 233:Generated_Source\PSoC4/UART.c **** * Parameters:
 234:Generated_Source\PSoC4/UART.c **** *  None.
 235:Generated_Source\PSoC4/UART.c **** *
 236:Generated_Source\PSoC4/UART.c **** * Return:
 237:Generated_Source\PSoC4/UART.c **** *  None.
 238:Generated_Source\PSoC4/UART.c **** *
 239:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
 240:Generated_Source\PSoC4/UART.c **** void UART_Stop(void) 
 241:Generated_Source\PSoC4/UART.c **** {
 207              		.loc 1 241 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 8
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211 0000 90B5     		push	{r4, r7, lr}
 212              		.cfi_def_cfa_offset 12
 213              		.cfi_offset 4, -12
 214              		.cfi_offset 7, -8
 215              		.cfi_offset 14, -4
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 9


 216 0002 83B0     		sub	sp, sp, #12
 217              		.cfi_def_cfa_offset 24
 218 0004 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
 242:Generated_Source\PSoC4/UART.c ****     uint8 enableInterrupts;
 243:Generated_Source\PSoC4/UART.c ****     enableInterrupts = CyEnterCriticalSection();
 220              		.loc 1 243 0
 221 0006 FC1D     		adds	r4, r7, #7
 222 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 223 000c 0300     		movs	r3, r0
 224 000e 2370     		strb	r3, [r4]
 244:Generated_Source\PSoC4/UART.c **** 
 245:Generated_Source\PSoC4/UART.c ****     /* Write Bit Counter Disable */
 246:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 247:Generated_Source\PSoC4/UART.c ****         UART_RXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 225              		.loc 1 247 0
 226 0010 114A     		ldr	r2, .L12
 227 0012 114B     		ldr	r3, .L12
 228 0014 1B78     		ldrb	r3, [r3]
 229 0016 DBB2     		uxtb	r3, r3
 230 0018 2021     		movs	r1, #32
 231 001a 8B43     		bics	r3, r1
 232 001c DBB2     		uxtb	r3, r3
 233 001e 1370     		strb	r3, [r2]
 248:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 249:Generated_Source\PSoC4/UART.c **** 
 250:Generated_Source\PSoC4/UART.c ****     #if (UART_TX_ENABLED)
 251:Generated_Source\PSoC4/UART.c ****         #if(!UART_TXCLKGEN_DP)
 252:Generated_Source\PSoC4/UART.c ****             UART_TXBITCTR_CONTROL_REG &= (uint8) ~UART_CNTR_ENABLE;
 253:Generated_Source\PSoC4/UART.c ****         #endif /* (!UART_TXCLKGEN_DP) */
 254:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_TX_ENABLED) */
 255:Generated_Source\PSoC4/UART.c **** 
 256:Generated_Source\PSoC4/UART.c ****     #if (UART_INTERNAL_CLOCK_USED)
 257:Generated_Source\PSoC4/UART.c ****         UART_IntClock_Stop();   /* Disable the clock */
 234              		.loc 1 257 0
 235 0020 FFF7FEFF 		bl	UART_IntClock_Stop
 258:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_INTERNAL_CLOCK_USED) */
 259:Generated_Source\PSoC4/UART.c **** 
 260:Generated_Source\PSoC4/UART.c ****     /* Disable internal interrupt component */
 261:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_ENABLED || UART_HD_ENABLED)
 262:Generated_Source\PSoC4/UART.c ****         UART_RXSTATUS_ACTL_REG  &= (uint8) ~UART_INT_ENABLE;
 236              		.loc 1 262 0
 237 0024 0D4A     		ldr	r2, .L12+4
 238 0026 0D4B     		ldr	r3, .L12+4
 239 0028 1B78     		ldrb	r3, [r3]
 240 002a DBB2     		uxtb	r3, r3
 241 002c 1021     		movs	r1, #16
 242 002e 8B43     		bics	r3, r1
 243 0030 DBB2     		uxtb	r3, r3
 244 0032 1370     		strb	r3, [r2]
 263:Generated_Source\PSoC4/UART.c **** 
 264:Generated_Source\PSoC4/UART.c ****         #if (UART_RX_INTERRUPT_ENABLED)
 265:Generated_Source\PSoC4/UART.c ****             UART_DisableRxInt();
 266:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_RX_INTERRUPT_ENABLED) */
 267:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_ENABLED || UART_HD_ENABLED) */
 268:Generated_Source\PSoC4/UART.c **** 
 269:Generated_Source\PSoC4/UART.c ****     #if (UART_TX_ENABLED)
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 10


 270:Generated_Source\PSoC4/UART.c ****         UART_TXSTATUS_ACTL_REG &= (uint8) ~UART_INT_ENABLE;
 245              		.loc 1 270 0
 246 0034 0A4A     		ldr	r2, .L12+8
 247 0036 0A4B     		ldr	r3, .L12+8
 248 0038 1B78     		ldrb	r3, [r3]
 249 003a DBB2     		uxtb	r3, r3
 250 003c 1021     		movs	r1, #16
 251 003e 8B43     		bics	r3, r1
 252 0040 DBB2     		uxtb	r3, r3
 253 0042 1370     		strb	r3, [r2]
 271:Generated_Source\PSoC4/UART.c **** 
 272:Generated_Source\PSoC4/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 273:Generated_Source\PSoC4/UART.c ****             UART_DisableTxInt();
 274:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_INTERRUPT_ENABLED) */
 275:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_TX_ENABLED) */
 276:Generated_Source\PSoC4/UART.c **** 
 277:Generated_Source\PSoC4/UART.c ****     CyExitCriticalSection(enableInterrupts);
 254              		.loc 1 277 0
 255 0044 FB1D     		adds	r3, r7, #7
 256 0046 1B78     		ldrb	r3, [r3]
 257 0048 1800     		movs	r0, r3
 258 004a FFF7FEFF 		bl	CyExitCriticalSection
 278:Generated_Source\PSoC4/UART.c **** }
 259              		.loc 1 278 0
 260 004e C046     		nop
 261 0050 BD46     		mov	sp, r7
 262 0052 03B0     		add	sp, sp, #12
 263              		@ sp needed
 264 0054 90BD     		pop	{r4, r7, pc}
 265              	.L13:
 266 0056 C046     		.align	2
 267              	.L12:
 268 0058 93000F40 		.word	1074725011
 269 005c 92000F40 		.word	1074725010
 270 0060 90000F40 		.word	1074725008
 271              		.cfi_endproc
 272              	.LFE3:
 273              		.size	UART_Stop, .-UART_Stop
 274              		.section	.text.UART_ReadControlRegister,"ax",%progbits
 275              		.align	2
 276              		.global	UART_ReadControlRegister
 277              		.code	16
 278              		.thumb_func
 279              		.type	UART_ReadControlRegister, %function
 280              	UART_ReadControlRegister:
 281              	.LFB4:
 279:Generated_Source\PSoC4/UART.c **** 
 280:Generated_Source\PSoC4/UART.c **** 
 281:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
 282:Generated_Source\PSoC4/UART.c **** * Function Name: UART_ReadControlRegister
 283:Generated_Source\PSoC4/UART.c **** ********************************************************************************
 284:Generated_Source\PSoC4/UART.c **** *
 285:Generated_Source\PSoC4/UART.c **** * Summary:
 286:Generated_Source\PSoC4/UART.c **** *  Returns the current value of the control register.
 287:Generated_Source\PSoC4/UART.c **** *
 288:Generated_Source\PSoC4/UART.c **** * Parameters:
 289:Generated_Source\PSoC4/UART.c **** *  None.
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 11


 290:Generated_Source\PSoC4/UART.c **** *
 291:Generated_Source\PSoC4/UART.c **** * Return:
 292:Generated_Source\PSoC4/UART.c **** *  Contents of the control register.
 293:Generated_Source\PSoC4/UART.c **** *
 294:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
 295:Generated_Source\PSoC4/UART.c **** uint8 UART_ReadControlRegister(void) 
 296:Generated_Source\PSoC4/UART.c **** {
 282              		.loc 1 296 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286 0000 80B5     		push	{r7, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0002 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 297:Generated_Source\PSoC4/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 298:Generated_Source\PSoC4/UART.c ****         return(0u);
 292              		.loc 1 298 0
 293 0004 0023     		movs	r3, #0
 299:Generated_Source\PSoC4/UART.c ****     #else
 300:Generated_Source\PSoC4/UART.c ****         return(UART_CONTROL_REG);
 301:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 302:Generated_Source\PSoC4/UART.c **** }
 294              		.loc 1 302 0
 295 0006 1800     		movs	r0, r3
 296 0008 BD46     		mov	sp, r7
 297              		@ sp needed
 298 000a 80BD     		pop	{r7, pc}
 299              		.cfi_endproc
 300              	.LFE4:
 301              		.size	UART_ReadControlRegister, .-UART_ReadControlRegister
 302              		.section	.text.UART_WriteControlRegister,"ax",%progbits
 303              		.align	2
 304              		.global	UART_WriteControlRegister
 305              		.code	16
 306              		.thumb_func
 307              		.type	UART_WriteControlRegister, %function
 308              	UART_WriteControlRegister:
 309              	.LFB5:
 303:Generated_Source\PSoC4/UART.c **** 
 304:Generated_Source\PSoC4/UART.c **** 
 305:Generated_Source\PSoC4/UART.c **** /*******************************************************************************
 306:Generated_Source\PSoC4/UART.c **** * Function Name: UART_WriteControlRegister
 307:Generated_Source\PSoC4/UART.c **** ********************************************************************************
 308:Generated_Source\PSoC4/UART.c **** *
 309:Generated_Source\PSoC4/UART.c **** * Summary:
 310:Generated_Source\PSoC4/UART.c **** *  Writes an 8-bit value into the control register
 311:Generated_Source\PSoC4/UART.c **** *
 312:Generated_Source\PSoC4/UART.c **** * Parameters:
 313:Generated_Source\PSoC4/UART.c **** *  control:  control register value
 314:Generated_Source\PSoC4/UART.c **** *
 315:Generated_Source\PSoC4/UART.c **** * Return:
 316:Generated_Source\PSoC4/UART.c **** *  None.
 317:Generated_Source\PSoC4/UART.c **** *
 318:Generated_Source\PSoC4/UART.c **** *******************************************************************************/
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 12


 319:Generated_Source\PSoC4/UART.c **** void  UART_WriteControlRegister(uint8 control) 
 320:Generated_Source\PSoC4/UART.c **** {
 310              		.loc 1 320 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 8
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314 0000 80B5     		push	{r7, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 7, -8
 317              		.cfi_offset 14, -4
 318 0002 82B0     		sub	sp, sp, #8
 319              		.cfi_def_cfa_offset 16
 320 0004 00AF     		add	r7, sp, #0
 321              		.cfi_def_cfa_register 7
 322 0006 0200     		movs	r2, r0
 323 0008 FB1D     		adds	r3, r7, #7
 324 000a 1A70     		strb	r2, [r3]
 321:Generated_Source\PSoC4/UART.c ****     #if (UART_CONTROL_REG_REMOVED)
 322:Generated_Source\PSoC4/UART.c ****         if(0u != control)
 323:Generated_Source\PSoC4/UART.c ****         {
 324:Generated_Source\PSoC4/UART.c ****             /* Suppress compiler warning */
 325:Generated_Source\PSoC4/UART.c ****         }
 326:Generated_Source\PSoC4/UART.c ****     #else
 327:Generated_Source\PSoC4/UART.c ****        UART_CONTROL_REG = control;
 328:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_CONTROL_REG_REMOVED) */
 329:Generated_Source\PSoC4/UART.c **** }
 325              		.loc 1 329 0
 326 000c C046     		nop
 327 000e BD46     		mov	sp, r7
 328 0010 02B0     		add	sp, sp, #8
 329              		@ sp needed
 330 0012 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE5:
 333              		.size	UART_WriteControlRegister, .-UART_WriteControlRegister
 334              		.section	.text.UART_SetRxInterruptMode,"ax",%progbits
 335              		.align	2
 336              		.global	UART_SetRxInterruptMode
 337              		.code	16
 338              		.thumb_func
 339              		.type	UART_SetRxInterruptMode, %function
 340              	UART_SetRxInterruptMode:
 341              	.LFB6:
 330:Generated_Source\PSoC4/UART.c **** 
 331:Generated_Source\PSoC4/UART.c **** 
 332:Generated_Source\PSoC4/UART.c **** #if(UART_RX_ENABLED || UART_HD_ENABLED)
 333:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 334:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SetRxInterruptMode
 335:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 336:Generated_Source\PSoC4/UART.c ****     *
 337:Generated_Source\PSoC4/UART.c ****     * Summary:
 338:Generated_Source\PSoC4/UART.c ****     *  Configures the RX interrupt sources enabled.
 339:Generated_Source\PSoC4/UART.c ****     *
 340:Generated_Source\PSoC4/UART.c ****     * Parameters:
 341:Generated_Source\PSoC4/UART.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:Generated_Source\PSoC4/UART.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:Generated_Source\PSoC4/UART.c ****     *  combination of status register bit-masks shown below:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 13


 344:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_BREAK            Interrupt on break.
 348:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_OVERRUN          Interrupt on overrun error.
 349:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:Generated_Source\PSoC4/UART.c ****     *      UART_RX_STS_MRKSPC           Interrupt on address detect.
 351:Generated_Source\PSoC4/UART.c ****     *
 352:Generated_Source\PSoC4/UART.c ****     * Return:
 353:Generated_Source\PSoC4/UART.c ****     *  None.
 354:Generated_Source\PSoC4/UART.c ****     *
 355:Generated_Source\PSoC4/UART.c ****     * Theory:
 356:Generated_Source\PSoC4/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:Generated_Source\PSoC4/UART.c ****     *
 358:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 359:Generated_Source\PSoC4/UART.c ****     void UART_SetRxInterruptMode(uint8 intSrc) 
 360:Generated_Source\PSoC4/UART.c ****     {
 342              		.loc 1 360 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 8
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 82B0     		sub	sp, sp, #8
 351              		.cfi_def_cfa_offset 16
 352 0004 00AF     		add	r7, sp, #0
 353              		.cfi_def_cfa_register 7
 354 0006 0200     		movs	r2, r0
 355 0008 FB1D     		adds	r3, r7, #7
 356 000a 1A70     		strb	r2, [r3]
 361:Generated_Source\PSoC4/UART.c ****         UART_RXSTATUS_MASK_REG  = intSrc;
 357              		.loc 1 361 0
 358 000c 034A     		ldr	r2, .L18
 359 000e FB1D     		adds	r3, r7, #7
 360 0010 1B78     		ldrb	r3, [r3]
 361 0012 1370     		strb	r3, [r2]
 362:Generated_Source\PSoC4/UART.c ****     }
 362              		.loc 1 362 0
 363 0014 C046     		nop
 364 0016 BD46     		mov	sp, r7
 365 0018 02B0     		add	sp, sp, #8
 366              		@ sp needed
 367 001a 80BD     		pop	{r7, pc}
 368              	.L19:
 369              		.align	2
 370              	.L18:
 371 001c 82000F40 		.word	1074724994
 372              		.cfi_endproc
 373              	.LFE6:
 374              		.size	UART_SetRxInterruptMode, .-UART_SetRxInterruptMode
 375              		.section	.text.UART_ReadRxData,"ax",%progbits
 376              		.align	2
 377              		.global	UART_ReadRxData
 378              		.code	16
 379              		.thumb_func
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 14


 380              		.type	UART_ReadRxData, %function
 381              	UART_ReadRxData:
 382              	.LFB7:
 363:Generated_Source\PSoC4/UART.c **** 
 364:Generated_Source\PSoC4/UART.c **** 
 365:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 366:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_ReadRxData
 367:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 368:Generated_Source\PSoC4/UART.c ****     *
 369:Generated_Source\PSoC4/UART.c ****     * Summary:
 370:Generated_Source\PSoC4/UART.c ****     *  Returns the next byte of received data. This function returns data without
 371:Generated_Source\PSoC4/UART.c ****     *  checking the status. You must check the status separately.
 372:Generated_Source\PSoC4/UART.c ****     *
 373:Generated_Source\PSoC4/UART.c ****     * Parameters:
 374:Generated_Source\PSoC4/UART.c ****     *  None.
 375:Generated_Source\PSoC4/UART.c ****     *
 376:Generated_Source\PSoC4/UART.c ****     * Return:
 377:Generated_Source\PSoC4/UART.c ****     *  Received data from RX register
 378:Generated_Source\PSoC4/UART.c ****     *
 379:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 380:Generated_Source\PSoC4/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 381:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 382:Generated_Source\PSoC4/UART.c ****     *     checked to identify new data.
 383:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 384:Generated_Source\PSoC4/UART.c ****     *     incremented after each byte has been read from buffer.
 385:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 386:Generated_Source\PSoC4/UART.c ****     *     in RX ISR.
 387:Generated_Source\PSoC4/UART.c ****     *
 388:Generated_Source\PSoC4/UART.c ****     * Reentrant:
 389:Generated_Source\PSoC4/UART.c ****     *  No.
 390:Generated_Source\PSoC4/UART.c ****     *
 391:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 392:Generated_Source\PSoC4/UART.c ****     uint8 UART_ReadRxData(void) 
 393:Generated_Source\PSoC4/UART.c ****     {
 383              		.loc 1 393 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 8
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0000 80B5     		push	{r7, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 7, -8
 390              		.cfi_offset 14, -4
 391 0002 82B0     		sub	sp, sp, #8
 392              		.cfi_def_cfa_offset 16
 393 0004 00AF     		add	r7, sp, #0
 394              		.cfi_def_cfa_register 7
 394:Generated_Source\PSoC4/UART.c ****         uint8 rxData;
 395:Generated_Source\PSoC4/UART.c **** 
 396:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 397:Generated_Source\PSoC4/UART.c **** 
 398:Generated_Source\PSoC4/UART.c ****         uint8 locRxBufferRead;
 399:Generated_Source\PSoC4/UART.c ****         uint8 locRxBufferWrite;
 400:Generated_Source\PSoC4/UART.c **** 
 401:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt */
 402:Generated_Source\PSoC4/UART.c ****         UART_DisableRxInt();
 403:Generated_Source\PSoC4/UART.c **** 
 404:Generated_Source\PSoC4/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 15


 405:Generated_Source\PSoC4/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 406:Generated_Source\PSoC4/UART.c **** 
 407:Generated_Source\PSoC4/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408:Generated_Source\PSoC4/UART.c ****         {
 409:Generated_Source\PSoC4/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 410:Generated_Source\PSoC4/UART.c ****             locRxBufferRead++;
 411:Generated_Source\PSoC4/UART.c **** 
 412:Generated_Source\PSoC4/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 413:Generated_Source\PSoC4/UART.c ****             {
 414:Generated_Source\PSoC4/UART.c ****                 locRxBufferRead = 0u;
 415:Generated_Source\PSoC4/UART.c ****             }
 416:Generated_Source\PSoC4/UART.c ****             /* Update the real pointer */
 417:Generated_Source\PSoC4/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 418:Generated_Source\PSoC4/UART.c **** 
 419:Generated_Source\PSoC4/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 420:Generated_Source\PSoC4/UART.c ****             {
 421:Generated_Source\PSoC4/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 422:Generated_Source\PSoC4/UART.c ****                 #if ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u))
 423:Generated_Source\PSoC4/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:Generated_Source\PSoC4/UART.c ****                     #if( UART_HD_ENABLED )
 425:Generated_Source\PSoC4/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 426:Generated_Source\PSoC4/UART.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:Generated_Source\PSoC4/UART.c ****                             *  configuration set, otherwise
 428:Generated_Source\PSoC4/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:Generated_Source\PSoC4/UART.c ****                             */
 430:Generated_Source\PSoC4/UART.c ****                             UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 431:Generated_Source\PSoC4/UART.c ****                         }
 432:Generated_Source\PSoC4/UART.c ****                     #else
 433:Generated_Source\PSoC4/UART.c ****                         UART_RXSTATUS_MASK_REG  |= UART_RX_STS_FIFO_NOTEMPTY;
 434:Generated_Source\PSoC4/UART.c ****                     #endif /* end UART_HD_ENABLED */
 435:Generated_Source\PSoC4/UART.c ****                 #endif /* ((UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u)) */
 436:Generated_Source\PSoC4/UART.c ****             }
 437:Generated_Source\PSoC4/UART.c ****         }
 438:Generated_Source\PSoC4/UART.c ****         else
 439:Generated_Source\PSoC4/UART.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:Generated_Source\PSoC4/UART.c ****             rxData = UART_RXDATA_REG;
 441:Generated_Source\PSoC4/UART.c ****         }
 442:Generated_Source\PSoC4/UART.c **** 
 443:Generated_Source\PSoC4/UART.c ****         UART_EnableRxInt();
 444:Generated_Source\PSoC4/UART.c **** 
 445:Generated_Source\PSoC4/UART.c ****     #else
 446:Generated_Source\PSoC4/UART.c **** 
 447:Generated_Source\PSoC4/UART.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:Generated_Source\PSoC4/UART.c ****         rxData = UART_RXDATA_REG;
 395              		.loc 1 448 0
 396 0006 054A     		ldr	r2, .L22
 397 0008 FB1D     		adds	r3, r7, #7
 398 000a 1278     		ldrb	r2, [r2]
 399 000c 1A70     		strb	r2, [r3]
 449:Generated_Source\PSoC4/UART.c **** 
 450:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 451:Generated_Source\PSoC4/UART.c **** 
 452:Generated_Source\PSoC4/UART.c ****         return(rxData);
 400              		.loc 1 452 0
 401 000e FB1D     		adds	r3, r7, #7
 402 0010 1B78     		ldrb	r3, [r3]
 453:Generated_Source\PSoC4/UART.c ****     }
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 16


 403              		.loc 1 453 0
 404 0012 1800     		movs	r0, r3
 405 0014 BD46     		mov	sp, r7
 406 0016 02B0     		add	sp, sp, #8
 407              		@ sp needed
 408 0018 80BD     		pop	{r7, pc}
 409              	.L23:
 410 001a C046     		.align	2
 411              	.L22:
 412 001c 43000F40 		.word	1074724931
 413              		.cfi_endproc
 414              	.LFE7:
 415              		.size	UART_ReadRxData, .-UART_ReadRxData
 416              		.section	.text.UART_ReadRxStatus,"ax",%progbits
 417              		.align	2
 418              		.global	UART_ReadRxStatus
 419              		.code	16
 420              		.thumb_func
 421              		.type	UART_ReadRxStatus, %function
 422              	UART_ReadRxStatus:
 423              	.LFB8:
 454:Generated_Source\PSoC4/UART.c **** 
 455:Generated_Source\PSoC4/UART.c **** 
 456:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 457:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_ReadRxStatus
 458:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 459:Generated_Source\PSoC4/UART.c ****     *
 460:Generated_Source\PSoC4/UART.c ****     * Summary:
 461:Generated_Source\PSoC4/UART.c ****     *  Returns the current state of the receiver status register and the software
 462:Generated_Source\PSoC4/UART.c ****     *  buffer overflow status.
 463:Generated_Source\PSoC4/UART.c ****     *
 464:Generated_Source\PSoC4/UART.c ****     * Parameters:
 465:Generated_Source\PSoC4/UART.c ****     *  None.
 466:Generated_Source\PSoC4/UART.c ****     *
 467:Generated_Source\PSoC4/UART.c ****     * Return:
 468:Generated_Source\PSoC4/UART.c ****     *  Current state of the status register.
 469:Generated_Source\PSoC4/UART.c ****     *
 470:Generated_Source\PSoC4/UART.c ****     * Side Effect:
 471:Generated_Source\PSoC4/UART.c ****     *  All status register bits are clear-on-read except
 472:Generated_Source\PSoC4/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY.
 473:Generated_Source\PSoC4/UART.c ****     *  UART_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:Generated_Source\PSoC4/UART.c ****     *  register read.
 475:Generated_Source\PSoC4/UART.c ****     *
 476:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 477:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferOverflow - used to indicate overload condition.
 478:Generated_Source\PSoC4/UART.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:Generated_Source\PSoC4/UART.c ****     *   UART_rxBufferRead to write new data. This condition returned
 480:Generated_Source\PSoC4/UART.c ****     *   and cleared to zero by this API as an
 481:Generated_Source\PSoC4/UART.c ****     *   UART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:Generated_Source\PSoC4/UART.c ****     *   bits.
 483:Generated_Source\PSoC4/UART.c ****     *
 484:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 485:Generated_Source\PSoC4/UART.c ****     uint8 UART_ReadRxStatus(void) 
 486:Generated_Source\PSoC4/UART.c ****     {
 424              		.loc 1 486 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 17


 427              		@ frame_needed = 1, uses_anonymous_args = 0
 428 0000 80B5     		push	{r7, lr}
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 82B0     		sub	sp, sp, #8
 433              		.cfi_def_cfa_offset 16
 434 0004 00AF     		add	r7, sp, #0
 435              		.cfi_def_cfa_register 7
 487:Generated_Source\PSoC4/UART.c ****         uint8 status;
 488:Generated_Source\PSoC4/UART.c **** 
 489:Generated_Source\PSoC4/UART.c ****         status = UART_RXSTATUS_REG & UART_RX_HW_MASK;
 436              		.loc 1 489 0
 437 0006 064B     		ldr	r3, .L26
 438 0008 1B78     		ldrb	r3, [r3]
 439 000a DAB2     		uxtb	r2, r3
 440 000c FB1D     		adds	r3, r7, #7
 441 000e 7F21     		movs	r1, #127
 442 0010 0A40     		ands	r2, r1
 443 0012 1A70     		strb	r2, [r3]
 490:Generated_Source\PSoC4/UART.c **** 
 491:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 492:Generated_Source\PSoC4/UART.c ****         if(UART_rxBufferOverflow != 0u)
 493:Generated_Source\PSoC4/UART.c ****         {
 494:Generated_Source\PSoC4/UART.c ****             status |= UART_RX_STS_SOFT_BUFF_OVER;
 495:Generated_Source\PSoC4/UART.c ****             UART_rxBufferOverflow = 0u;
 496:Generated_Source\PSoC4/UART.c ****         }
 497:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 498:Generated_Source\PSoC4/UART.c **** 
 499:Generated_Source\PSoC4/UART.c ****         return(status);
 444              		.loc 1 499 0
 445 0014 FB1D     		adds	r3, r7, #7
 446 0016 1B78     		ldrb	r3, [r3]
 500:Generated_Source\PSoC4/UART.c ****     }
 447              		.loc 1 500 0
 448 0018 1800     		movs	r0, r3
 449 001a BD46     		mov	sp, r7
 450 001c 02B0     		add	sp, sp, #8
 451              		@ sp needed
 452 001e 80BD     		pop	{r7, pc}
 453              	.L27:
 454              		.align	2
 455              	.L26:
 456 0020 62000F40 		.word	1074724962
 457              		.cfi_endproc
 458              	.LFE8:
 459              		.size	UART_ReadRxStatus, .-UART_ReadRxStatus
 460              		.section	.text.UART_GetChar,"ax",%progbits
 461              		.align	2
 462              		.global	UART_GetChar
 463              		.code	16
 464              		.thumb_func
 465              		.type	UART_GetChar, %function
 466              	UART_GetChar:
 467              	.LFB9:
 501:Generated_Source\PSoC4/UART.c **** 
 502:Generated_Source\PSoC4/UART.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 18


 503:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 504:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_GetChar
 505:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 506:Generated_Source\PSoC4/UART.c ****     *
 507:Generated_Source\PSoC4/UART.c ****     * Summary:
 508:Generated_Source\PSoC4/UART.c ****     *  Returns the last received byte of data. UART_GetChar() is
 509:Generated_Source\PSoC4/UART.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:Generated_Source\PSoC4/UART.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:Generated_Source\PSoC4/UART.c ****     *
 512:Generated_Source\PSoC4/UART.c ****     * Parameters:
 513:Generated_Source\PSoC4/UART.c ****     *  None.
 514:Generated_Source\PSoC4/UART.c ****     *
 515:Generated_Source\PSoC4/UART.c ****     * Return:
 516:Generated_Source\PSoC4/UART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:Generated_Source\PSoC4/UART.c ****     *  A returned zero signifies an error condition or no data available.
 518:Generated_Source\PSoC4/UART.c ****     *
 519:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 520:Generated_Source\PSoC4/UART.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
 521:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
 522:Generated_Source\PSoC4/UART.c ****     *     checked to identify new data.
 523:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
 524:Generated_Source\PSoC4/UART.c ****     *     incremented after each byte has been read from buffer.
 525:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferLoopDetect - cleared if loop condition was detected
 526:Generated_Source\PSoC4/UART.c ****     *     in RX ISR.
 527:Generated_Source\PSoC4/UART.c ****     *
 528:Generated_Source\PSoC4/UART.c ****     * Reentrant:
 529:Generated_Source\PSoC4/UART.c ****     *  No.
 530:Generated_Source\PSoC4/UART.c ****     *
 531:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 532:Generated_Source\PSoC4/UART.c ****     uint8 UART_GetChar(void) 
 533:Generated_Source\PSoC4/UART.c ****     {
 468              		.loc 1 533 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 8
 471              		@ frame_needed = 1, uses_anonymous_args = 0
 472 0000 80B5     		push	{r7, lr}
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476 0002 82B0     		sub	sp, sp, #8
 477              		.cfi_def_cfa_offset 16
 478 0004 00AF     		add	r7, sp, #0
 479              		.cfi_def_cfa_register 7
 534:Generated_Source\PSoC4/UART.c ****         uint8 rxData = 0u;
 480              		.loc 1 534 0
 481 0006 FB1D     		adds	r3, r7, #7
 482 0008 0022     		movs	r2, #0
 483 000a 1A70     		strb	r2, [r3]
 535:Generated_Source\PSoC4/UART.c ****         uint8 rxStatus;
 536:Generated_Source\PSoC4/UART.c **** 
 537:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 538:Generated_Source\PSoC4/UART.c ****         uint8 locRxBufferRead;
 539:Generated_Source\PSoC4/UART.c ****         uint8 locRxBufferWrite;
 540:Generated_Source\PSoC4/UART.c **** 
 541:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt */
 542:Generated_Source\PSoC4/UART.c ****         UART_DisableRxInt();
 543:Generated_Source\PSoC4/UART.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 19


 544:Generated_Source\PSoC4/UART.c ****         locRxBufferRead  = UART_rxBufferRead;
 545:Generated_Source\PSoC4/UART.c ****         locRxBufferWrite = UART_rxBufferWrite;
 546:Generated_Source\PSoC4/UART.c **** 
 547:Generated_Source\PSoC4/UART.c ****         if( (UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:Generated_Source\PSoC4/UART.c ****         {
 549:Generated_Source\PSoC4/UART.c ****             rxData = UART_rxBuffer[locRxBufferRead];
 550:Generated_Source\PSoC4/UART.c ****             locRxBufferRead++;
 551:Generated_Source\PSoC4/UART.c ****             if(locRxBufferRead >= UART_RX_BUFFER_SIZE)
 552:Generated_Source\PSoC4/UART.c ****             {
 553:Generated_Source\PSoC4/UART.c ****                 locRxBufferRead = 0u;
 554:Generated_Source\PSoC4/UART.c ****             }
 555:Generated_Source\PSoC4/UART.c ****             /* Update the real pointer */
 556:Generated_Source\PSoC4/UART.c ****             UART_rxBufferRead = locRxBufferRead;
 557:Generated_Source\PSoC4/UART.c **** 
 558:Generated_Source\PSoC4/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 559:Generated_Source\PSoC4/UART.c ****             {
 560:Generated_Source\PSoC4/UART.c ****                 UART_rxBufferLoopDetect = 0u;
 561:Generated_Source\PSoC4/UART.c ****                 #if( (UART_RX_INTERRUPT_ENABLED) && (UART_FLOW_CONTROL != 0u) )
 562:Generated_Source\PSoC4/UART.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:Generated_Source\PSoC4/UART.c ****                     #if( UART_HD_ENABLED )
 564:Generated_Source\PSoC4/UART.c ****                         if((UART_CONTROL_REG & UART_CTRL_HD_SEND) == 0u)
 565:Generated_Source\PSoC4/UART.c ****                         {   /* In Half duplex mode return RX mask only if
 566:Generated_Source\PSoC4/UART.c ****                             *  RX configuration set, otherwise
 567:Generated_Source\PSoC4/UART.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:Generated_Source\PSoC4/UART.c ****                             */
 569:Generated_Source\PSoC4/UART.c ****                             UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 570:Generated_Source\PSoC4/UART.c ****                         }
 571:Generated_Source\PSoC4/UART.c ****                     #else
 572:Generated_Source\PSoC4/UART.c ****                         UART_RXSTATUS_MASK_REG |= UART_RX_STS_FIFO_NOTEMPTY;
 573:Generated_Source\PSoC4/UART.c ****                     #endif /* end UART_HD_ENABLED */
 574:Generated_Source\PSoC4/UART.c ****                 #endif /* UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:Generated_Source\PSoC4/UART.c ****             }
 576:Generated_Source\PSoC4/UART.c **** 
 577:Generated_Source\PSoC4/UART.c ****         }
 578:Generated_Source\PSoC4/UART.c ****         else
 579:Generated_Source\PSoC4/UART.c ****         {   rxStatus = UART_RXSTATUS_REG;
 580:Generated_Source\PSoC4/UART.c ****             if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:Generated_Source\PSoC4/UART.c ****             {   /* Read received data from FIFO */
 582:Generated_Source\PSoC4/UART.c ****                 rxData = UART_RXDATA_REG;
 583:Generated_Source\PSoC4/UART.c ****                 /*Check status on error*/
 584:Generated_Source\PSoC4/UART.c ****                 if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 585:Generated_Source\PSoC4/UART.c ****                                 UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 586:Generated_Source\PSoC4/UART.c ****                 {
 587:Generated_Source\PSoC4/UART.c ****                     rxData = 0u;
 588:Generated_Source\PSoC4/UART.c ****                 }
 589:Generated_Source\PSoC4/UART.c ****             }
 590:Generated_Source\PSoC4/UART.c ****         }
 591:Generated_Source\PSoC4/UART.c **** 
 592:Generated_Source\PSoC4/UART.c ****         UART_EnableRxInt();
 593:Generated_Source\PSoC4/UART.c **** 
 594:Generated_Source\PSoC4/UART.c ****     #else
 595:Generated_Source\PSoC4/UART.c **** 
 596:Generated_Source\PSoC4/UART.c ****         rxStatus =UART_RXSTATUS_REG;
 484              		.loc 1 596 0
 485 000c 0D4A     		ldr	r2, .L31
 486 000e BB1D     		adds	r3, r7, #6
 487 0010 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 20


 488 0012 1A70     		strb	r2, [r3]
 597:Generated_Source\PSoC4/UART.c ****         if((rxStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 489              		.loc 1 597 0
 490 0014 BB1D     		adds	r3, r7, #6
 491 0016 1B78     		ldrb	r3, [r3]
 492 0018 2022     		movs	r2, #32
 493 001a 1340     		ands	r3, r2
 494 001c 0BD0     		beq	.L29
 598:Generated_Source\PSoC4/UART.c ****         {
 599:Generated_Source\PSoC4/UART.c ****             /* Read received data from FIFO */
 600:Generated_Source\PSoC4/UART.c ****             rxData = UART_RXDATA_REG;
 495              		.loc 1 600 0
 496 001e 0A4A     		ldr	r2, .L31+4
 497 0020 FB1D     		adds	r3, r7, #7
 498 0022 1278     		ldrb	r2, [r2]
 499 0024 1A70     		strb	r2, [r3]
 601:Generated_Source\PSoC4/UART.c **** 
 602:Generated_Source\PSoC4/UART.c ****             /*Check status on error*/
 603:Generated_Source\PSoC4/UART.c ****             if((rxStatus & (UART_RX_STS_BREAK | UART_RX_STS_PAR_ERROR |
 604:Generated_Source\PSoC4/UART.c ****                             UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 500              		.loc 1 604 0
 501 0026 BB1D     		adds	r3, r7, #6
 502 0028 1B78     		ldrb	r3, [r3]
 503 002a 1E22     		movs	r2, #30
 504 002c 1340     		ands	r3, r2
 603:Generated_Source\PSoC4/UART.c ****                             UART_RX_STS_STOP_ERROR | UART_RX_STS_OVERRUN)) != 0u)
 505              		.loc 1 603 0
 506 002e 02D0     		beq	.L29
 605:Generated_Source\PSoC4/UART.c ****             {
 606:Generated_Source\PSoC4/UART.c ****                 rxData = 0u;
 507              		.loc 1 606 0
 508 0030 FB1D     		adds	r3, r7, #7
 509 0032 0022     		movs	r2, #0
 510 0034 1A70     		strb	r2, [r3]
 511              	.L29:
 607:Generated_Source\PSoC4/UART.c ****             }
 608:Generated_Source\PSoC4/UART.c ****         }
 609:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 610:Generated_Source\PSoC4/UART.c **** 
 611:Generated_Source\PSoC4/UART.c ****         return(rxData);
 512              		.loc 1 611 0
 513 0036 FB1D     		adds	r3, r7, #7
 514 0038 1B78     		ldrb	r3, [r3]
 612:Generated_Source\PSoC4/UART.c ****     }
 515              		.loc 1 612 0
 516 003a 1800     		movs	r0, r3
 517 003c BD46     		mov	sp, r7
 518 003e 02B0     		add	sp, sp, #8
 519              		@ sp needed
 520 0040 80BD     		pop	{r7, pc}
 521              	.L32:
 522 0042 C046     		.align	2
 523              	.L31:
 524 0044 62000F40 		.word	1074724962
 525 0048 43000F40 		.word	1074724931
 526              		.cfi_endproc
 527              	.LFE9:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 21


 528              		.size	UART_GetChar, .-UART_GetChar
 529              		.section	.text.UART_GetByte,"ax",%progbits
 530              		.align	2
 531              		.global	UART_GetByte
 532              		.code	16
 533              		.thumb_func
 534              		.type	UART_GetByte, %function
 535              	UART_GetByte:
 536              	.LFB10:
 613:Generated_Source\PSoC4/UART.c **** 
 614:Generated_Source\PSoC4/UART.c **** 
 615:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 616:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_GetByte
 617:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 618:Generated_Source\PSoC4/UART.c ****     *
 619:Generated_Source\PSoC4/UART.c ****     * Summary:
 620:Generated_Source\PSoC4/UART.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:Generated_Source\PSoC4/UART.c ****     *  condition.
 622:Generated_Source\PSoC4/UART.c ****     *
 623:Generated_Source\PSoC4/UART.c ****     * Parameters:
 624:Generated_Source\PSoC4/UART.c ****     *  None.
 625:Generated_Source\PSoC4/UART.c ****     *
 626:Generated_Source\PSoC4/UART.c ****     * Return:
 627:Generated_Source\PSoC4/UART.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:Generated_Source\PSoC4/UART.c ****     *  an error has occurred.
 629:Generated_Source\PSoC4/UART.c ****     *
 630:Generated_Source\PSoC4/UART.c ****     * Reentrant:
 631:Generated_Source\PSoC4/UART.c ****     *  No.
 632:Generated_Source\PSoC4/UART.c ****     *
 633:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 634:Generated_Source\PSoC4/UART.c ****     uint16 UART_GetByte(void) 
 635:Generated_Source\PSoC4/UART.c ****     {
 537              		.loc 1 635 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541 0000 B0B5     		push	{r4, r5, r7, lr}
 542              		.cfi_def_cfa_offset 16
 543              		.cfi_offset 4, -16
 544              		.cfi_offset 5, -12
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547 0002 00AF     		add	r7, sp, #0
 548              		.cfi_def_cfa_register 7
 636:Generated_Source\PSoC4/UART.c ****         
 637:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 638:Generated_Source\PSoC4/UART.c ****         uint16 locErrorStatus;
 639:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt */
 640:Generated_Source\PSoC4/UART.c ****         UART_DisableRxInt();
 641:Generated_Source\PSoC4/UART.c ****         locErrorStatus = (uint16)UART_errorStatus;
 642:Generated_Source\PSoC4/UART.c ****         UART_errorStatus = 0u;
 643:Generated_Source\PSoC4/UART.c ****         UART_EnableRxInt();
 644:Generated_Source\PSoC4/UART.c ****         return ( (uint16)(locErrorStatus << 8u) | UART_ReadRxData() );
 645:Generated_Source\PSoC4/UART.c ****     #else
 646:Generated_Source\PSoC4/UART.c ****         return ( ((uint16)UART_ReadRxStatus() << 8u) | UART_ReadRxData() );
 549              		.loc 1 646 0
 550 0004 FFF7FEFF 		bl	UART_ReadRxStatus
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 22


 551 0008 0300     		movs	r3, r0
 552 000a 1B02     		lsls	r3, r3, #8
 553 000c 1CB2     		sxth	r4, r3
 554 000e FFF7FEFF 		bl	UART_ReadRxData
 555 0012 0300     		movs	r3, r0
 556 0014 1BB2     		sxth	r3, r3
 557 0016 2343     		orrs	r3, r4
 558 0018 1BB2     		sxth	r3, r3
 559 001a 9BB2     		uxth	r3, r3
 647:Generated_Source\PSoC4/UART.c ****     #endif /* UART_RX_INTERRUPT_ENABLED */
 648:Generated_Source\PSoC4/UART.c ****         
 649:Generated_Source\PSoC4/UART.c ****     }
 560              		.loc 1 649 0
 561 001c 1800     		movs	r0, r3
 562 001e BD46     		mov	sp, r7
 563              		@ sp needed
 564 0020 B0BD     		pop	{r4, r5, r7, pc}
 565              		.cfi_endproc
 566              	.LFE10:
 567              		.size	UART_GetByte, .-UART_GetByte
 568 0022 C046     		.section	.text.UART_GetRxBufferSize,"ax",%progbits
 569              		.align	2
 570              		.global	UART_GetRxBufferSize
 571              		.code	16
 572              		.thumb_func
 573              		.type	UART_GetRxBufferSize, %function
 574              	UART_GetRxBufferSize:
 575              	.LFB11:
 650:Generated_Source\PSoC4/UART.c **** 
 651:Generated_Source\PSoC4/UART.c **** 
 652:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 653:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_GetRxBufferSize
 654:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 655:Generated_Source\PSoC4/UART.c ****     *
 656:Generated_Source\PSoC4/UART.c ****     * Summary:
 657:Generated_Source\PSoC4/UART.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:Generated_Source\PSoC4/UART.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:Generated_Source\PSoC4/UART.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:Generated_Source\PSoC4/UART.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:Generated_Source\PSoC4/UART.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:Generated_Source\PSoC4/UART.c ****     *    account.
 663:Generated_Source\PSoC4/UART.c ****     *
 664:Generated_Source\PSoC4/UART.c ****     * Parameters:
 665:Generated_Source\PSoC4/UART.c ****     *  None.
 666:Generated_Source\PSoC4/UART.c ****     *
 667:Generated_Source\PSoC4/UART.c ****     * Return:
 668:Generated_Source\PSoC4/UART.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:Generated_Source\PSoC4/UART.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:Generated_Source\PSoC4/UART.c ****     *
 671:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 672:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferWrite - used to calculate left bytes.
 673:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferRead - used to calculate left bytes.
 674:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferLoopDetect - checked to decide left bytes amount.
 675:Generated_Source\PSoC4/UART.c ****     *
 676:Generated_Source\PSoC4/UART.c ****     * Reentrant:
 677:Generated_Source\PSoC4/UART.c ****     *  No.
 678:Generated_Source\PSoC4/UART.c ****     *
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 23


 679:Generated_Source\PSoC4/UART.c ****     * Theory:
 680:Generated_Source\PSoC4/UART.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:Generated_Source\PSoC4/UART.c ****     *
 682:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 683:Generated_Source\PSoC4/UART.c ****     uint8 UART_GetRxBufferSize(void)
 684:Generated_Source\PSoC4/UART.c ****                                                             
 685:Generated_Source\PSoC4/UART.c ****     {
 576              		.loc 1 685 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 8
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580 0000 80B5     		push	{r7, lr}
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 7, -8
 583              		.cfi_offset 14, -4
 584 0002 82B0     		sub	sp, sp, #8
 585              		.cfi_def_cfa_offset 16
 586 0004 00AF     		add	r7, sp, #0
 587              		.cfi_def_cfa_register 7
 686:Generated_Source\PSoC4/UART.c ****         uint8 size;
 687:Generated_Source\PSoC4/UART.c **** 
 688:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 689:Generated_Source\PSoC4/UART.c **** 
 690:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt */
 691:Generated_Source\PSoC4/UART.c ****         UART_DisableRxInt();
 692:Generated_Source\PSoC4/UART.c **** 
 693:Generated_Source\PSoC4/UART.c ****         if(UART_rxBufferRead == UART_rxBufferWrite)
 694:Generated_Source\PSoC4/UART.c ****         {
 695:Generated_Source\PSoC4/UART.c ****             if(UART_rxBufferLoopDetect != 0u)
 696:Generated_Source\PSoC4/UART.c ****             {
 697:Generated_Source\PSoC4/UART.c ****                 size = UART_RX_BUFFER_SIZE;
 698:Generated_Source\PSoC4/UART.c ****             }
 699:Generated_Source\PSoC4/UART.c ****             else
 700:Generated_Source\PSoC4/UART.c ****             {
 701:Generated_Source\PSoC4/UART.c ****                 size = 0u;
 702:Generated_Source\PSoC4/UART.c ****             }
 703:Generated_Source\PSoC4/UART.c ****         }
 704:Generated_Source\PSoC4/UART.c ****         else if(UART_rxBufferRead < UART_rxBufferWrite)
 705:Generated_Source\PSoC4/UART.c ****         {
 706:Generated_Source\PSoC4/UART.c ****             size = (UART_rxBufferWrite - UART_rxBufferRead);
 707:Generated_Source\PSoC4/UART.c ****         }
 708:Generated_Source\PSoC4/UART.c ****         else
 709:Generated_Source\PSoC4/UART.c ****         {
 710:Generated_Source\PSoC4/UART.c ****             size = (UART_RX_BUFFER_SIZE - UART_rxBufferRead) + UART_rxBufferWrite;
 711:Generated_Source\PSoC4/UART.c ****         }
 712:Generated_Source\PSoC4/UART.c **** 
 713:Generated_Source\PSoC4/UART.c ****         UART_EnableRxInt();
 714:Generated_Source\PSoC4/UART.c **** 
 715:Generated_Source\PSoC4/UART.c ****     #else
 716:Generated_Source\PSoC4/UART.c **** 
 717:Generated_Source\PSoC4/UART.c ****         /* We can only know if there is data in the fifo. */
 718:Generated_Source\PSoC4/UART.c ****         size = ((UART_RXSTATUS_REG & UART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 588              		.loc 1 718 0
 589 0006 094B     		ldr	r3, .L39
 590 0008 1B78     		ldrb	r3, [r3]
 591 000a DBB2     		uxtb	r3, r3
 592 000c 1A00     		movs	r2, r3
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 24


 593 000e 2023     		movs	r3, #32
 594 0010 1340     		ands	r3, r2
 595 0012 01D0     		beq	.L36
 596              		.loc 1 718 0 is_stmt 0 discriminator 1
 597 0014 0122     		movs	r2, #1
 598 0016 00E0     		b	.L37
 599              	.L36:
 600              		.loc 1 718 0 discriminator 2
 601 0018 0022     		movs	r2, #0
 602              	.L37:
 603              		.loc 1 718 0 discriminator 4
 604 001a FB1D     		adds	r3, r7, #7
 605 001c 1A70     		strb	r2, [r3]
 719:Generated_Source\PSoC4/UART.c **** 
 720:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 721:Generated_Source\PSoC4/UART.c **** 
 722:Generated_Source\PSoC4/UART.c ****         return(size);
 606              		.loc 1 722 0 is_stmt 1 discriminator 4
 607 001e FB1D     		adds	r3, r7, #7
 608 0020 1B78     		ldrb	r3, [r3]
 723:Generated_Source\PSoC4/UART.c ****     }
 609              		.loc 1 723 0 discriminator 4
 610 0022 1800     		movs	r0, r3
 611 0024 BD46     		mov	sp, r7
 612 0026 02B0     		add	sp, sp, #8
 613              		@ sp needed
 614 0028 80BD     		pop	{r7, pc}
 615              	.L40:
 616 002a C046     		.align	2
 617              	.L39:
 618 002c 62000F40 		.word	1074724962
 619              		.cfi_endproc
 620              	.LFE11:
 621              		.size	UART_GetRxBufferSize, .-UART_GetRxBufferSize
 622              		.section	.text.UART_ClearRxBuffer,"ax",%progbits
 623              		.align	2
 624              		.global	UART_ClearRxBuffer
 625              		.code	16
 626              		.thumb_func
 627              		.type	UART_ClearRxBuffer, %function
 628              	UART_ClearRxBuffer:
 629              	.LFB12:
 724:Generated_Source\PSoC4/UART.c **** 
 725:Generated_Source\PSoC4/UART.c **** 
 726:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 727:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_ClearRxBuffer
 728:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 729:Generated_Source\PSoC4/UART.c ****     *
 730:Generated_Source\PSoC4/UART.c ****     * Summary:
 731:Generated_Source\PSoC4/UART.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:Generated_Source\PSoC4/UART.c ****     *
 733:Generated_Source\PSoC4/UART.c ****     * Parameters:
 734:Generated_Source\PSoC4/UART.c ****     *  None.
 735:Generated_Source\PSoC4/UART.c ****     *
 736:Generated_Source\PSoC4/UART.c ****     * Return:
 737:Generated_Source\PSoC4/UART.c ****     *  None.
 738:Generated_Source\PSoC4/UART.c ****     *
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 25


 739:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 740:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferWrite - cleared to zero.
 741:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferRead - cleared to zero.
 742:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferLoopDetect - cleared to zero.
 743:Generated_Source\PSoC4/UART.c ****     *  UART_rxBufferOverflow - cleared to zero.
 744:Generated_Source\PSoC4/UART.c ****     *
 745:Generated_Source\PSoC4/UART.c ****     * Reentrant:
 746:Generated_Source\PSoC4/UART.c ****     *  No.
 747:Generated_Source\PSoC4/UART.c ****     *
 748:Generated_Source\PSoC4/UART.c ****     * Theory:
 749:Generated_Source\PSoC4/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:Generated_Source\PSoC4/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:Generated_Source\PSoC4/UART.c ****     *  have remained in the RAM.
 752:Generated_Source\PSoC4/UART.c ****     *
 753:Generated_Source\PSoC4/UART.c ****     * Side Effects:
 754:Generated_Source\PSoC4/UART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:Generated_Source\PSoC4/UART.c ****     *
 756:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 757:Generated_Source\PSoC4/UART.c ****     void UART_ClearRxBuffer(void) 
 758:Generated_Source\PSoC4/UART.c ****     {
 630              		.loc 1 758 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 8
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634 0000 90B5     		push	{r4, r7, lr}
 635              		.cfi_def_cfa_offset 12
 636              		.cfi_offset 4, -12
 637              		.cfi_offset 7, -8
 638              		.cfi_offset 14, -4
 639 0002 83B0     		sub	sp, sp, #12
 640              		.cfi_def_cfa_offset 24
 641 0004 00AF     		add	r7, sp, #0
 642              		.cfi_def_cfa_register 7
 759:Generated_Source\PSoC4/UART.c ****         uint8 enableInterrupts;
 760:Generated_Source\PSoC4/UART.c **** 
 761:Generated_Source\PSoC4/UART.c ****         /* Clear the HW FIFO */
 762:Generated_Source\PSoC4/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 643              		.loc 1 762 0
 644 0006 FC1D     		adds	r4, r7, #7
 645 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 646 000c 0300     		movs	r3, r0
 647 000e 2370     		strb	r3, [r4]
 763:Generated_Source\PSoC4/UART.c ****         UART_RXDATA_AUX_CTL_REG |= (uint8)  UART_RX_FIFO_CLR;
 648              		.loc 1 763 0
 649 0010 0C4A     		ldr	r2, .L42
 650 0012 0C4B     		ldr	r3, .L42
 651 0014 1B78     		ldrb	r3, [r3]
 652 0016 DBB2     		uxtb	r3, r3
 653 0018 0121     		movs	r1, #1
 654 001a 0B43     		orrs	r3, r1
 655 001c DBB2     		uxtb	r3, r3
 656 001e 1370     		strb	r3, [r2]
 764:Generated_Source\PSoC4/UART.c ****         UART_RXDATA_AUX_CTL_REG &= (uint8) ~UART_RX_FIFO_CLR;
 657              		.loc 1 764 0
 658 0020 084A     		ldr	r2, .L42
 659 0022 084B     		ldr	r3, .L42
 660 0024 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 26


 661 0026 DBB2     		uxtb	r3, r3
 662 0028 0121     		movs	r1, #1
 663 002a 8B43     		bics	r3, r1
 664 002c DBB2     		uxtb	r3, r3
 665 002e 1370     		strb	r3, [r2]
 765:Generated_Source\PSoC4/UART.c ****         CyExitCriticalSection(enableInterrupts);
 666              		.loc 1 765 0
 667 0030 FB1D     		adds	r3, r7, #7
 668 0032 1B78     		ldrb	r3, [r3]
 669 0034 1800     		movs	r0, r3
 670 0036 FFF7FEFF 		bl	CyExitCriticalSection
 766:Generated_Source\PSoC4/UART.c **** 
 767:Generated_Source\PSoC4/UART.c ****     #if (UART_RX_INTERRUPT_ENABLED)
 768:Generated_Source\PSoC4/UART.c **** 
 769:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt. */
 770:Generated_Source\PSoC4/UART.c ****         UART_DisableRxInt();
 771:Generated_Source\PSoC4/UART.c **** 
 772:Generated_Source\PSoC4/UART.c ****         UART_rxBufferRead = 0u;
 773:Generated_Source\PSoC4/UART.c ****         UART_rxBufferWrite = 0u;
 774:Generated_Source\PSoC4/UART.c ****         UART_rxBufferLoopDetect = 0u;
 775:Generated_Source\PSoC4/UART.c ****         UART_rxBufferOverflow = 0u;
 776:Generated_Source\PSoC4/UART.c **** 
 777:Generated_Source\PSoC4/UART.c ****         UART_EnableRxInt();
 778:Generated_Source\PSoC4/UART.c **** 
 779:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_RX_INTERRUPT_ENABLED) */
 780:Generated_Source\PSoC4/UART.c **** 
 781:Generated_Source\PSoC4/UART.c ****     }
 671              		.loc 1 781 0
 672 003a C046     		nop
 673 003c BD46     		mov	sp, r7
 674 003e 03B0     		add	sp, sp, #12
 675              		@ sp needed
 676 0040 90BD     		pop	{r4, r7, pc}
 677              	.L43:
 678 0042 C046     		.align	2
 679              	.L42:
 680 0044 93000F40 		.word	1074725011
 681              		.cfi_endproc
 682              	.LFE12:
 683              		.size	UART_ClearRxBuffer, .-UART_ClearRxBuffer
 684              		.section	.text.UART_SetRxAddressMode,"ax",%progbits
 685              		.align	2
 686              		.global	UART_SetRxAddressMode
 687              		.code	16
 688              		.thumb_func
 689              		.type	UART_SetRxAddressMode, %function
 690              	UART_SetRxAddressMode:
 691              	.LFB13:
 782:Generated_Source\PSoC4/UART.c **** 
 783:Generated_Source\PSoC4/UART.c **** 
 784:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 785:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SetRxAddressMode
 786:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 787:Generated_Source\PSoC4/UART.c ****     *
 788:Generated_Source\PSoC4/UART.c ****     * Summary:
 789:Generated_Source\PSoC4/UART.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:Generated_Source\PSoC4/UART.c ****     *  UART.
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 27


 791:Generated_Source\PSoC4/UART.c ****     *
 792:Generated_Source\PSoC4/UART.c ****     * Parameters:
 793:Generated_Source\PSoC4/UART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:Generated_Source\PSoC4/UART.c ****     *  UART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:Generated_Source\PSoC4/UART.c ****     *                                               detection
 796:Generated_Source\PSoC4/UART.c ****     *  UART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:Generated_Source\PSoC4/UART.c ****     *                                               address detection
 798:Generated_Source\PSoC4/UART.c ****     *  UART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:Generated_Source\PSoC4/UART.c ****     *                                               detection
 800:Generated_Source\PSoC4/UART.c ****     *  UART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:Generated_Source\PSoC4/UART.c ****     *                                               address detection
 802:Generated_Source\PSoC4/UART.c ****     *  UART__B_UART__AM_NONE - No address detection
 803:Generated_Source\PSoC4/UART.c ****     *
 804:Generated_Source\PSoC4/UART.c ****     * Return:
 805:Generated_Source\PSoC4/UART.c ****     *  None.
 806:Generated_Source\PSoC4/UART.c ****     *
 807:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 808:Generated_Source\PSoC4/UART.c ****     *  UART_rxAddressMode - the parameter stored in this variable for
 809:Generated_Source\PSoC4/UART.c ****     *   the farther usage in RX ISR.
 810:Generated_Source\PSoC4/UART.c ****     *  UART_rxAddressDetected - set to initial state (0).
 811:Generated_Source\PSoC4/UART.c ****     *
 812:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 813:Generated_Source\PSoC4/UART.c ****     void UART_SetRxAddressMode(uint8 addressMode)
 814:Generated_Source\PSoC4/UART.c ****                                                         
 815:Generated_Source\PSoC4/UART.c ****     {
 692              		.loc 1 815 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 8
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696 0000 80B5     		push	{r7, lr}
 697              		.cfi_def_cfa_offset 8
 698              		.cfi_offset 7, -8
 699              		.cfi_offset 14, -4
 700 0002 82B0     		sub	sp, sp, #8
 701              		.cfi_def_cfa_offset 16
 702 0004 00AF     		add	r7, sp, #0
 703              		.cfi_def_cfa_register 7
 704 0006 0200     		movs	r2, r0
 705 0008 FB1D     		adds	r3, r7, #7
 706 000a 1A70     		strb	r2, [r3]
 816:Generated_Source\PSoC4/UART.c ****         #if(UART_RXHW_ADDRESS_ENABLED)
 817:Generated_Source\PSoC4/UART.c ****             #if(UART_CONTROL_REG_REMOVED)
 818:Generated_Source\PSoC4/UART.c ****                 if(0u != addressMode)
 819:Generated_Source\PSoC4/UART.c ****                 {
 820:Generated_Source\PSoC4/UART.c ****                     /* Suppress compiler warning */
 821:Generated_Source\PSoC4/UART.c ****                 }
 822:Generated_Source\PSoC4/UART.c ****             #else /* UART_CONTROL_REG_REMOVED */
 823:Generated_Source\PSoC4/UART.c ****                 uint8 tmpCtrl;
 824:Generated_Source\PSoC4/UART.c ****                 tmpCtrl = UART_CONTROL_REG & (uint8)~UART_CTRL_RXADDR_MODE_MASK;
 825:Generated_Source\PSoC4/UART.c ****                 tmpCtrl |= (uint8)(addressMode << UART_CTRL_RXADDR_MODE0_SHIFT);
 826:Generated_Source\PSoC4/UART.c ****                 UART_CONTROL_REG = tmpCtrl;
 827:Generated_Source\PSoC4/UART.c **** 
 828:Generated_Source\PSoC4/UART.c ****                 #if(UART_RX_INTERRUPT_ENABLED && \
 829:Generated_Source\PSoC4/UART.c ****                    (UART_RXBUFFERSIZE > UART_FIFO_LENGTH) )
 830:Generated_Source\PSoC4/UART.c ****                     UART_rxAddressMode = addressMode;
 831:Generated_Source\PSoC4/UART.c ****                     UART_rxAddressDetected = 0u;
 832:Generated_Source\PSoC4/UART.c ****                 #endif /* End UART_RXBUFFERSIZE > UART_FIFO_LENGTH*/
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 28


 833:Generated_Source\PSoC4/UART.c ****             #endif /* End UART_CONTROL_REG_REMOVED */
 834:Generated_Source\PSoC4/UART.c ****         #else /* UART_RXHW_ADDRESS_ENABLED */
 835:Generated_Source\PSoC4/UART.c ****             if(0u != addressMode)
 836:Generated_Source\PSoC4/UART.c ****             {
 837:Generated_Source\PSoC4/UART.c ****                 /* Suppress compiler warning */
 838:Generated_Source\PSoC4/UART.c ****             }
 839:Generated_Source\PSoC4/UART.c ****         #endif /* End UART_RXHW_ADDRESS_ENABLED */
 840:Generated_Source\PSoC4/UART.c ****     }
 707              		.loc 1 840 0
 708 000c C046     		nop
 709 000e BD46     		mov	sp, r7
 710 0010 02B0     		add	sp, sp, #8
 711              		@ sp needed
 712 0012 80BD     		pop	{r7, pc}
 713              		.cfi_endproc
 714              	.LFE13:
 715              		.size	UART_SetRxAddressMode, .-UART_SetRxAddressMode
 716              		.section	.text.UART_SetRxAddress1,"ax",%progbits
 717              		.align	2
 718              		.global	UART_SetRxAddress1
 719              		.code	16
 720              		.thumb_func
 721              		.type	UART_SetRxAddress1, %function
 722              	UART_SetRxAddress1:
 723              	.LFB14:
 841:Generated_Source\PSoC4/UART.c **** 
 842:Generated_Source\PSoC4/UART.c **** 
 843:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 844:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SetRxAddress1
 845:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 846:Generated_Source\PSoC4/UART.c ****     *
 847:Generated_Source\PSoC4/UART.c ****     * Summary:
 848:Generated_Source\PSoC4/UART.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:Generated_Source\PSoC4/UART.c ****     *
 850:Generated_Source\PSoC4/UART.c ****     * Parameters:
 851:Generated_Source\PSoC4/UART.c ****     *  address: Address #1 for hardware address detection.
 852:Generated_Source\PSoC4/UART.c ****     *
 853:Generated_Source\PSoC4/UART.c ****     * Return:
 854:Generated_Source\PSoC4/UART.c ****     *  None.
 855:Generated_Source\PSoC4/UART.c ****     *
 856:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 857:Generated_Source\PSoC4/UART.c ****     void UART_SetRxAddress1(uint8 address) 
 858:Generated_Source\PSoC4/UART.c ****     {
 724              		.loc 1 858 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 8
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728 0000 80B5     		push	{r7, lr}
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 7, -8
 731              		.cfi_offset 14, -4
 732 0002 82B0     		sub	sp, sp, #8
 733              		.cfi_def_cfa_offset 16
 734 0004 00AF     		add	r7, sp, #0
 735              		.cfi_def_cfa_register 7
 736 0006 0200     		movs	r2, r0
 737 0008 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 29


 738 000a 1A70     		strb	r2, [r3]
 859:Generated_Source\PSoC4/UART.c ****         UART_RXADDRESS1_REG = address;
 739              		.loc 1 859 0
 740 000c 034A     		ldr	r2, .L46
 741 000e FB1D     		adds	r3, r7, #7
 742 0010 1B78     		ldrb	r3, [r3]
 743 0012 1370     		strb	r3, [r2]
 860:Generated_Source\PSoC4/UART.c ****     }
 744              		.loc 1 860 0
 745 0014 C046     		nop
 746 0016 BD46     		mov	sp, r7
 747 0018 02B0     		add	sp, sp, #8
 748              		@ sp needed
 749 001a 80BD     		pop	{r7, pc}
 750              	.L47:
 751              		.align	2
 752              	.L46:
 753 001c 23000F40 		.word	1074724899
 754              		.cfi_endproc
 755              	.LFE14:
 756              		.size	UART_SetRxAddress1, .-UART_SetRxAddress1
 757              		.section	.text.UART_SetRxAddress2,"ax",%progbits
 758              		.align	2
 759              		.global	UART_SetRxAddress2
 760              		.code	16
 761              		.thumb_func
 762              		.type	UART_SetRxAddress2, %function
 763              	UART_SetRxAddress2:
 764              	.LFB15:
 861:Generated_Source\PSoC4/UART.c **** 
 862:Generated_Source\PSoC4/UART.c **** 
 863:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 864:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SetRxAddress2
 865:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 866:Generated_Source\PSoC4/UART.c ****     *
 867:Generated_Source\PSoC4/UART.c ****     * Summary:
 868:Generated_Source\PSoC4/UART.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:Generated_Source\PSoC4/UART.c ****     *
 870:Generated_Source\PSoC4/UART.c ****     * Parameters:
 871:Generated_Source\PSoC4/UART.c ****     *  address: Address #2 for hardware address detection.
 872:Generated_Source\PSoC4/UART.c ****     *
 873:Generated_Source\PSoC4/UART.c ****     * Return:
 874:Generated_Source\PSoC4/UART.c ****     *  None.
 875:Generated_Source\PSoC4/UART.c ****     *
 876:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 877:Generated_Source\PSoC4/UART.c ****     void UART_SetRxAddress2(uint8 address) 
 878:Generated_Source\PSoC4/UART.c ****     {
 765              		.loc 1 878 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 8
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769 0000 80B5     		push	{r7, lr}
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 7, -8
 772              		.cfi_offset 14, -4
 773 0002 82B0     		sub	sp, sp, #8
 774              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 30


 775 0004 00AF     		add	r7, sp, #0
 776              		.cfi_def_cfa_register 7
 777 0006 0200     		movs	r2, r0
 778 0008 FB1D     		adds	r3, r7, #7
 779 000a 1A70     		strb	r2, [r3]
 879:Generated_Source\PSoC4/UART.c ****         UART_RXADDRESS2_REG = address;
 780              		.loc 1 879 0
 781 000c 034A     		ldr	r2, .L49
 782 000e FB1D     		adds	r3, r7, #7
 783 0010 1B78     		ldrb	r3, [r3]
 784 0012 1370     		strb	r3, [r2]
 880:Generated_Source\PSoC4/UART.c ****     }
 785              		.loc 1 880 0
 786 0014 C046     		nop
 787 0016 BD46     		mov	sp, r7
 788 0018 02B0     		add	sp, sp, #8
 789              		@ sp needed
 790 001a 80BD     		pop	{r7, pc}
 791              	.L50:
 792              		.align	2
 793              	.L49:
 794 001c 33000F40 		.word	1074724915
 795              		.cfi_endproc
 796              	.LFE15:
 797              		.size	UART_SetRxAddress2, .-UART_SetRxAddress2
 798              		.section	.text.UART_SetTxInterruptMode,"ax",%progbits
 799              		.align	2
 800              		.global	UART_SetTxInterruptMode
 801              		.code	16
 802              		.thumb_func
 803              		.type	UART_SetTxInterruptMode, %function
 804              	UART_SetTxInterruptMode:
 805              	.LFB16:
 881:Generated_Source\PSoC4/UART.c **** 
 882:Generated_Source\PSoC4/UART.c **** #endif  /* UART_RX_ENABLED || UART_HD_ENABLED*/
 883:Generated_Source\PSoC4/UART.c **** 
 884:Generated_Source\PSoC4/UART.c **** 
 885:Generated_Source\PSoC4/UART.c **** #if( (UART_TX_ENABLED) || (UART_HD_ENABLED) )
 886:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 887:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SetTxInterruptMode
 888:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 889:Generated_Source\PSoC4/UART.c ****     *
 890:Generated_Source\PSoC4/UART.c ****     * Summary:
 891:Generated_Source\PSoC4/UART.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:Generated_Source\PSoC4/UART.c ****     *  interrupt.
 893:Generated_Source\PSoC4/UART.c ****     *
 894:Generated_Source\PSoC4/UART.c ****     * Parameters:
 895:Generated_Source\PSoC4/UART.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:Generated_Source\PSoC4/UART.c ****     *   UART_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:Generated_Source\PSoC4/UART.c ****     *   UART_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:Generated_Source\PSoC4/UART.c ****     *   UART_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:Generated_Source\PSoC4/UART.c ****     *   UART_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:Generated_Source\PSoC4/UART.c ****     *
 901:Generated_Source\PSoC4/UART.c ****     * Return:
 902:Generated_Source\PSoC4/UART.c ****     *  None.
 903:Generated_Source\PSoC4/UART.c ****     *
 904:Generated_Source\PSoC4/UART.c ****     * Theory:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 31


 905:Generated_Source\PSoC4/UART.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:Generated_Source\PSoC4/UART.c ****     *
 907:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 908:Generated_Source\PSoC4/UART.c ****     void UART_SetTxInterruptMode(uint8 intSrc) 
 909:Generated_Source\PSoC4/UART.c ****     {
 806              		.loc 1 909 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 8
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810 0000 80B5     		push	{r7, lr}
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 7, -8
 813              		.cfi_offset 14, -4
 814 0002 82B0     		sub	sp, sp, #8
 815              		.cfi_def_cfa_offset 16
 816 0004 00AF     		add	r7, sp, #0
 817              		.cfi_def_cfa_register 7
 818 0006 0200     		movs	r2, r0
 819 0008 FB1D     		adds	r3, r7, #7
 820 000a 1A70     		strb	r2, [r3]
 910:Generated_Source\PSoC4/UART.c ****         UART_TXSTATUS_MASK_REG = intSrc;
 821              		.loc 1 910 0
 822 000c 034A     		ldr	r2, .L52
 823 000e FB1D     		adds	r3, r7, #7
 824 0010 1B78     		ldrb	r3, [r3]
 825 0012 1370     		strb	r3, [r2]
 911:Generated_Source\PSoC4/UART.c ****     }
 826              		.loc 1 911 0
 827 0014 C046     		nop
 828 0016 BD46     		mov	sp, r7
 829 0018 02B0     		add	sp, sp, #8
 830              		@ sp needed
 831 001a 80BD     		pop	{r7, pc}
 832              	.L53:
 833              		.align	2
 834              	.L52:
 835 001c 80000F40 		.word	1074724992
 836              		.cfi_endproc
 837              	.LFE16:
 838              		.size	UART_SetTxInterruptMode, .-UART_SetTxInterruptMode
 839              		.section	.text.UART_WriteTxData,"ax",%progbits
 840              		.align	2
 841              		.global	UART_WriteTxData
 842              		.code	16
 843              		.thumb_func
 844              		.type	UART_WriteTxData, %function
 845              	UART_WriteTxData:
 846              	.LFB17:
 912:Generated_Source\PSoC4/UART.c **** 
 913:Generated_Source\PSoC4/UART.c **** 
 914:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 915:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_WriteTxData
 916:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 917:Generated_Source\PSoC4/UART.c ****     *
 918:Generated_Source\PSoC4/UART.c ****     * Summary:
 919:Generated_Source\PSoC4/UART.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:Generated_Source\PSoC4/UART.c ****     *  available without checking the TX status register. You must check status
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 32


 921:Generated_Source\PSoC4/UART.c ****     *  separately.
 922:Generated_Source\PSoC4/UART.c ****     *
 923:Generated_Source\PSoC4/UART.c ****     * Parameters:
 924:Generated_Source\PSoC4/UART.c ****     *  txDataByte: data byte
 925:Generated_Source\PSoC4/UART.c ****     *
 926:Generated_Source\PSoC4/UART.c ****     * Return:
 927:Generated_Source\PSoC4/UART.c ****     * None.
 928:Generated_Source\PSoC4/UART.c ****     *
 929:Generated_Source\PSoC4/UART.c ****     * Global Variables:
 930:Generated_Source\PSoC4/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
 931:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
 932:Generated_Source\PSoC4/UART.c ****     *    incremented after each byte saved to buffer.
 933:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
 934:Generated_Source\PSoC4/UART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:Generated_Source\PSoC4/UART.c ****     *  UART_initVar - checked to identify that the component has been
 936:Generated_Source\PSoC4/UART.c ****     *    initialized.
 937:Generated_Source\PSoC4/UART.c ****     *
 938:Generated_Source\PSoC4/UART.c ****     * Reentrant:
 939:Generated_Source\PSoC4/UART.c ****     *  No.
 940:Generated_Source\PSoC4/UART.c ****     *
 941:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
 942:Generated_Source\PSoC4/UART.c ****     void UART_WriteTxData(uint8 txDataByte) 
 943:Generated_Source\PSoC4/UART.c ****     {
 847              		.loc 1 943 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 8
 850              		@ frame_needed = 1, uses_anonymous_args = 0
 851 0000 80B5     		push	{r7, lr}
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 7, -8
 854              		.cfi_offset 14, -4
 855 0002 82B0     		sub	sp, sp, #8
 856              		.cfi_def_cfa_offset 16
 857 0004 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 859 0006 0200     		movs	r2, r0
 860 0008 FB1D     		adds	r3, r7, #7
 861 000a 1A70     		strb	r2, [r3]
 944:Generated_Source\PSoC4/UART.c ****         /* If not Initialized then skip this function*/
 945:Generated_Source\PSoC4/UART.c ****         if(UART_initVar != 0u)
 862              		.loc 1 945 0
 863 000c 054B     		ldr	r3, .L57
 864 000e 1B78     		ldrb	r3, [r3]
 865 0010 002B     		cmp	r3, #0
 866 0012 03D0     		beq	.L56
 946:Generated_Source\PSoC4/UART.c ****         {
 947:Generated_Source\PSoC4/UART.c ****         #if (UART_TX_INTERRUPT_ENABLED)
 948:Generated_Source\PSoC4/UART.c **** 
 949:Generated_Source\PSoC4/UART.c ****             /* Protect variables that could change on interrupt. */
 950:Generated_Source\PSoC4/UART.c ****             UART_DisableTxInt();
 951:Generated_Source\PSoC4/UART.c **** 
 952:Generated_Source\PSoC4/UART.c ****             if( (UART_txBufferRead == UART_txBufferWrite) &&
 953:Generated_Source\PSoC4/UART.c ****                 ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
 954:Generated_Source\PSoC4/UART.c ****             {
 955:Generated_Source\PSoC4/UART.c ****                 /* Add directly to the FIFO. */
 956:Generated_Source\PSoC4/UART.c ****                 UART_TXDATA_REG = txDataByte;
 957:Generated_Source\PSoC4/UART.c ****             }
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 33


 958:Generated_Source\PSoC4/UART.c ****             else
 959:Generated_Source\PSoC4/UART.c ****             {
 960:Generated_Source\PSoC4/UART.c ****                 if(UART_txBufferWrite >= UART_TX_BUFFER_SIZE)
 961:Generated_Source\PSoC4/UART.c ****                 {
 962:Generated_Source\PSoC4/UART.c ****                     UART_txBufferWrite = 0u;
 963:Generated_Source\PSoC4/UART.c ****                 }
 964:Generated_Source\PSoC4/UART.c **** 
 965:Generated_Source\PSoC4/UART.c ****                 UART_txBuffer[UART_txBufferWrite] = txDataByte;
 966:Generated_Source\PSoC4/UART.c **** 
 967:Generated_Source\PSoC4/UART.c ****                 /* Add to the software buffer. */
 968:Generated_Source\PSoC4/UART.c ****                 UART_txBufferWrite++;
 969:Generated_Source\PSoC4/UART.c ****             }
 970:Generated_Source\PSoC4/UART.c **** 
 971:Generated_Source\PSoC4/UART.c ****             UART_EnableTxInt();
 972:Generated_Source\PSoC4/UART.c **** 
 973:Generated_Source\PSoC4/UART.c ****         #else
 974:Generated_Source\PSoC4/UART.c **** 
 975:Generated_Source\PSoC4/UART.c ****             /* Add directly to the FIFO. */
 976:Generated_Source\PSoC4/UART.c ****             UART_TXDATA_REG = txDataByte;
 867              		.loc 1 976 0
 868 0014 044A     		ldr	r2, .L57+4
 869 0016 FB1D     		adds	r3, r7, #7
 870 0018 1B78     		ldrb	r3, [r3]
 871 001a 1370     		strb	r3, [r2]
 872              	.L56:
 977:Generated_Source\PSoC4/UART.c **** 
 978:Generated_Source\PSoC4/UART.c ****         #endif /*(UART_TX_INTERRUPT_ENABLED) */
 979:Generated_Source\PSoC4/UART.c ****         }
 980:Generated_Source\PSoC4/UART.c ****     }
 873              		.loc 1 980 0
 874 001c C046     		nop
 875 001e BD46     		mov	sp, r7
 876 0020 02B0     		add	sp, sp, #8
 877              		@ sp needed
 878 0022 80BD     		pop	{r7, pc}
 879              	.L58:
 880              		.align	2
 881              	.L57:
 882 0024 00000000 		.word	UART_initVar
 883 0028 40000F40 		.word	1074724928
 884              		.cfi_endproc
 885              	.LFE17:
 886              		.size	UART_WriteTxData, .-UART_WriteTxData
 887              		.section	.text.UART_ReadTxStatus,"ax",%progbits
 888              		.align	2
 889              		.global	UART_ReadTxStatus
 890              		.code	16
 891              		.thumb_func
 892              		.type	UART_ReadTxStatus, %function
 893              	UART_ReadTxStatus:
 894              	.LFB18:
 981:Generated_Source\PSoC4/UART.c **** 
 982:Generated_Source\PSoC4/UART.c **** 
 983:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
 984:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_ReadTxStatus
 985:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
 986:Generated_Source\PSoC4/UART.c ****     *
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 34


 987:Generated_Source\PSoC4/UART.c ****     * Summary:
 988:Generated_Source\PSoC4/UART.c ****     *  Reads the status register for the TX portion of the UART.
 989:Generated_Source\PSoC4/UART.c ****     *
 990:Generated_Source\PSoC4/UART.c ****     * Parameters:
 991:Generated_Source\PSoC4/UART.c ****     *  None.
 992:Generated_Source\PSoC4/UART.c ****     *
 993:Generated_Source\PSoC4/UART.c ****     * Return:
 994:Generated_Source\PSoC4/UART.c ****     *  Contents of the status register
 995:Generated_Source\PSoC4/UART.c ****     *
 996:Generated_Source\PSoC4/UART.c ****     * Theory:
 997:Generated_Source\PSoC4/UART.c ****     *  This function reads the TX status register, which is cleared on read.
 998:Generated_Source\PSoC4/UART.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:Generated_Source\PSoC4/UART.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:Generated_Source\PSoC4/UART.c ****     *  and must be handled accordingly.
1001:Generated_Source\PSoC4/UART.c ****     *
1002:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1003:Generated_Source\PSoC4/UART.c ****     uint8 UART_ReadTxStatus(void) 
1004:Generated_Source\PSoC4/UART.c ****     {
 895              		.loc 1 1004 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 0002 00AF     		add	r7, sp, #0
 904              		.cfi_def_cfa_register 7
1005:Generated_Source\PSoC4/UART.c ****         return(UART_TXSTATUS_REG);
 905              		.loc 1 1005 0
 906 0004 024B     		ldr	r3, .L61
 907 0006 1B78     		ldrb	r3, [r3]
 908 0008 DBB2     		uxtb	r3, r3
1006:Generated_Source\PSoC4/UART.c ****     }
 909              		.loc 1 1006 0
 910 000a 1800     		movs	r0, r3
 911 000c BD46     		mov	sp, r7
 912              		@ sp needed
 913 000e 80BD     		pop	{r7, pc}
 914              	.L62:
 915              		.align	2
 916              	.L61:
 917 0010 60000F40 		.word	1074724960
 918              		.cfi_endproc
 919              	.LFE18:
 920              		.size	UART_ReadTxStatus, .-UART_ReadTxStatus
 921              		.section	.text.UART_PutChar,"ax",%progbits
 922              		.align	2
 923              		.global	UART_PutChar
 924              		.code	16
 925              		.thumb_func
 926              		.type	UART_PutChar, %function
 927              	UART_PutChar:
 928              	.LFB19:
1007:Generated_Source\PSoC4/UART.c **** 
1008:Generated_Source\PSoC4/UART.c **** 
1009:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 35


1010:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_PutChar
1011:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1012:Generated_Source\PSoC4/UART.c ****     *
1013:Generated_Source\PSoC4/UART.c ****     * Summary:
1014:Generated_Source\PSoC4/UART.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:Generated_Source\PSoC4/UART.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:Generated_Source\PSoC4/UART.c ****     *  hold the data.
1017:Generated_Source\PSoC4/UART.c ****     *
1018:Generated_Source\PSoC4/UART.c ****     * Parameters:
1019:Generated_Source\PSoC4/UART.c ****     *  txDataByte: Byte containing the data to transmit
1020:Generated_Source\PSoC4/UART.c ****     *
1021:Generated_Source\PSoC4/UART.c ****     * Return:
1022:Generated_Source\PSoC4/UART.c ****     *  None.
1023:Generated_Source\PSoC4/UART.c ****     *
1024:Generated_Source\PSoC4/UART.c ****     * Global Variables:
1025:Generated_Source\PSoC4/UART.c ****     *  UART_txBuffer - RAM buffer pointer for save data for transmission
1026:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferWrite - cyclic index for write to txBuffer,
1027:Generated_Source\PSoC4/UART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:Generated_Source\PSoC4/UART.c ****     *     saved to buffer.
1029:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferRead - cyclic index for read from txBuffer,
1030:Generated_Source\PSoC4/UART.c ****     *     checked to identify free space in txBuffer.
1031:Generated_Source\PSoC4/UART.c ****     *  UART_initVar - checked to identify that the component has been
1032:Generated_Source\PSoC4/UART.c ****     *     initialized.
1033:Generated_Source\PSoC4/UART.c ****     *
1034:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1035:Generated_Source\PSoC4/UART.c ****     *  No.
1036:Generated_Source\PSoC4/UART.c ****     *
1037:Generated_Source\PSoC4/UART.c ****     * Theory:
1038:Generated_Source\PSoC4/UART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:Generated_Source\PSoC4/UART.c ****     *
1040:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1041:Generated_Source\PSoC4/UART.c ****     void UART_PutChar(uint8 txDataByte) 
1042:Generated_Source\PSoC4/UART.c ****     {
 929              		.loc 1 1042 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 8
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933 0000 80B5     		push	{r7, lr}
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 82B0     		sub	sp, sp, #8
 938              		.cfi_def_cfa_offset 16
 939 0004 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0006 0200     		movs	r2, r0
 942 0008 FB1D     		adds	r3, r7, #7
 943 000a 1A70     		strb	r2, [r3]
1043:Generated_Source\PSoC4/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1044:Generated_Source\PSoC4/UART.c ****         /* The temporary output pointer is used since it takes two instructions
1045:Generated_Source\PSoC4/UART.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:Generated_Source\PSoC4/UART.c ****         *  pointer and getting an interrupt in between instructions.
1047:Generated_Source\PSoC4/UART.c ****         */
1048:Generated_Source\PSoC4/UART.c ****         uint8 locTxBufferWrite;
1049:Generated_Source\PSoC4/UART.c ****         uint8 locTxBufferRead;
1050:Generated_Source\PSoC4/UART.c **** 
1051:Generated_Source\PSoC4/UART.c ****         do
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 36


1052:Generated_Source\PSoC4/UART.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:Generated_Source\PSoC4/UART.c **** 
1054:Generated_Source\PSoC4/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:Generated_Source\PSoC4/UART.c ****             /* Disable TX interrupt to protect variables from modification */
1056:Generated_Source\PSoC4/UART.c ****             UART_DisableTxInt();
1057:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:Generated_Source\PSoC4/UART.c **** 
1059:Generated_Source\PSoC4/UART.c ****             locTxBufferWrite = UART_txBufferWrite;
1060:Generated_Source\PSoC4/UART.c ****             locTxBufferRead  = UART_txBufferRead;
1061:Generated_Source\PSoC4/UART.c **** 
1062:Generated_Source\PSoC4/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:Generated_Source\PSoC4/UART.c ****             /* Enable interrupt to continue transmission */
1064:Generated_Source\PSoC4/UART.c ****             UART_EnableTxInt();
1065:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:Generated_Source\PSoC4/UART.c ****         }
1067:Generated_Source\PSoC4/UART.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:Generated_Source\PSoC4/UART.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:Generated_Source\PSoC4/UART.c ****                                 (uint8)(UART_TX_BUFFER_SIZE - 1u)) );
1070:Generated_Source\PSoC4/UART.c **** 
1071:Generated_Source\PSoC4/UART.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:Generated_Source\PSoC4/UART.c ****             ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u) )
1073:Generated_Source\PSoC4/UART.c ****         {
1074:Generated_Source\PSoC4/UART.c ****             /* Add directly to the FIFO */
1075:Generated_Source\PSoC4/UART.c ****             UART_TXDATA_REG = txDataByte;
1076:Generated_Source\PSoC4/UART.c ****         }
1077:Generated_Source\PSoC4/UART.c ****         else
1078:Generated_Source\PSoC4/UART.c ****         {
1079:Generated_Source\PSoC4/UART.c ****             if(locTxBufferWrite >= UART_TX_BUFFER_SIZE)
1080:Generated_Source\PSoC4/UART.c ****             {
1081:Generated_Source\PSoC4/UART.c ****                 locTxBufferWrite = 0u;
1082:Generated_Source\PSoC4/UART.c ****             }
1083:Generated_Source\PSoC4/UART.c ****             /* Add to the software buffer. */
1084:Generated_Source\PSoC4/UART.c ****             UART_txBuffer[locTxBufferWrite] = txDataByte;
1085:Generated_Source\PSoC4/UART.c ****             locTxBufferWrite++;
1086:Generated_Source\PSoC4/UART.c **** 
1087:Generated_Source\PSoC4/UART.c ****             /* Finally, update the real output pointer */
1088:Generated_Source\PSoC4/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:Generated_Source\PSoC4/UART.c ****             UART_DisableTxInt();
1090:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:Generated_Source\PSoC4/UART.c **** 
1092:Generated_Source\PSoC4/UART.c ****             UART_txBufferWrite = locTxBufferWrite;
1093:Generated_Source\PSoC4/UART.c **** 
1094:Generated_Source\PSoC4/UART.c ****         #if ((UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:Generated_Source\PSoC4/UART.c ****             UART_EnableTxInt();
1096:Generated_Source\PSoC4/UART.c ****         #endif /* (UART_TX_BUFFER_SIZE > UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:Generated_Source\PSoC4/UART.c **** 
1098:Generated_Source\PSoC4/UART.c ****             if(0u != (UART_TXSTATUS_REG & UART_TX_STS_FIFO_EMPTY))
1099:Generated_Source\PSoC4/UART.c ****             {
1100:Generated_Source\PSoC4/UART.c ****                 /* Trigger TX interrupt to send software buffer */
1101:Generated_Source\PSoC4/UART.c ****                 UART_SetPendingTxInt();
1102:Generated_Source\PSoC4/UART.c ****             }
1103:Generated_Source\PSoC4/UART.c ****         }
1104:Generated_Source\PSoC4/UART.c **** 
1105:Generated_Source\PSoC4/UART.c ****     #else
1106:Generated_Source\PSoC4/UART.c **** 
1107:Generated_Source\PSoC4/UART.c ****         while((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) != 0u)
 944              		.loc 1 1107 0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 37


 945 000c C046     		nop
 946              	.L64:
 947              		.loc 1 1107 0 is_stmt 0 discriminator 1
 948 000e 074B     		ldr	r3, .L65
 949 0010 1B78     		ldrb	r3, [r3]
 950 0012 DBB2     		uxtb	r3, r3
 951 0014 1A00     		movs	r2, r3
 952 0016 0423     		movs	r3, #4
 953 0018 1340     		ands	r3, r2
 954 001a F8D1     		bne	.L64
1108:Generated_Source\PSoC4/UART.c ****         {
1109:Generated_Source\PSoC4/UART.c ****             /* Wait for room in the FIFO */
1110:Generated_Source\PSoC4/UART.c ****         }
1111:Generated_Source\PSoC4/UART.c **** 
1112:Generated_Source\PSoC4/UART.c ****         /* Add directly to the FIFO */
1113:Generated_Source\PSoC4/UART.c ****         UART_TXDATA_REG = txDataByte;
 955              		.loc 1 1113 0 is_stmt 1
 956 001c 044A     		ldr	r2, .L65+4
 957 001e FB1D     		adds	r3, r7, #7
 958 0020 1B78     		ldrb	r3, [r3]
 959 0022 1370     		strb	r3, [r2]
1114:Generated_Source\PSoC4/UART.c **** 
1115:Generated_Source\PSoC4/UART.c ****     #endif /* UART_TX_INTERRUPT_ENABLED */
1116:Generated_Source\PSoC4/UART.c ****     }
 960              		.loc 1 1116 0
 961 0024 C046     		nop
 962 0026 BD46     		mov	sp, r7
 963 0028 02B0     		add	sp, sp, #8
 964              		@ sp needed
 965 002a 80BD     		pop	{r7, pc}
 966              	.L66:
 967              		.align	2
 968              	.L65:
 969 002c 60000F40 		.word	1074724960
 970 0030 40000F40 		.word	1074724928
 971              		.cfi_endproc
 972              	.LFE19:
 973              		.size	UART_PutChar, .-UART_PutChar
 974              		.section	.text.UART_PutString,"ax",%progbits
 975              		.align	2
 976              		.global	UART_PutString
 977              		.code	16
 978              		.thumb_func
 979              		.type	UART_PutString, %function
 980              	UART_PutString:
 981              	.LFB20:
1117:Generated_Source\PSoC4/UART.c **** 
1118:Generated_Source\PSoC4/UART.c **** 
1119:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1120:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_PutString
1121:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1122:Generated_Source\PSoC4/UART.c ****     *
1123:Generated_Source\PSoC4/UART.c ****     * Summary:
1124:Generated_Source\PSoC4/UART.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:Generated_Source\PSoC4/UART.c ****     *
1126:Generated_Source\PSoC4/UART.c ****     * Parameters:
1127:Generated_Source\PSoC4/UART.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 38


1128:Generated_Source\PSoC4/UART.c ****     *
1129:Generated_Source\PSoC4/UART.c ****     * Return:
1130:Generated_Source\PSoC4/UART.c ****     *  None.
1131:Generated_Source\PSoC4/UART.c ****     *
1132:Generated_Source\PSoC4/UART.c ****     * Global Variables:
1133:Generated_Source\PSoC4/UART.c ****     *  UART_initVar - checked to identify that the component has been
1134:Generated_Source\PSoC4/UART.c ****     *     initialized.
1135:Generated_Source\PSoC4/UART.c ****     *
1136:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1137:Generated_Source\PSoC4/UART.c ****     *  No.
1138:Generated_Source\PSoC4/UART.c ****     *
1139:Generated_Source\PSoC4/UART.c ****     * Theory:
1140:Generated_Source\PSoC4/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:Generated_Source\PSoC4/UART.c ****     *  function blocks until the last character of the string is loaded into the
1142:Generated_Source\PSoC4/UART.c ****     *  TX buffer.
1143:Generated_Source\PSoC4/UART.c ****     *
1144:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1145:Generated_Source\PSoC4/UART.c ****     void UART_PutString(const char8 string[]) 
1146:Generated_Source\PSoC4/UART.c ****     {
 982              		.loc 1 1146 0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 16
 985              		@ frame_needed = 1, uses_anonymous_args = 0
 986 0000 80B5     		push	{r7, lr}
 987              		.cfi_def_cfa_offset 8
 988              		.cfi_offset 7, -8
 989              		.cfi_offset 14, -4
 990 0002 84B0     		sub	sp, sp, #16
 991              		.cfi_def_cfa_offset 24
 992 0004 00AF     		add	r7, sp, #0
 993              		.cfi_def_cfa_register 7
 994 0006 7860     		str	r0, [r7, #4]
1147:Generated_Source\PSoC4/UART.c ****         uint16 bufIndex = 0u;
 995              		.loc 1 1147 0
 996 0008 0E23     		movs	r3, #14
 997 000a FB18     		adds	r3, r7, r3
 998 000c 0022     		movs	r2, #0
 999 000e 1A80     		strh	r2, [r3]
1148:Generated_Source\PSoC4/UART.c **** 
1149:Generated_Source\PSoC4/UART.c ****         /* If not Initialized then skip this function */
1150:Generated_Source\PSoC4/UART.c ****         if(UART_initVar != 0u)
 1000              		.loc 1 1150 0
 1001 0010 104B     		ldr	r3, .L72
 1002 0012 1B78     		ldrb	r3, [r3]
 1003 0014 002B     		cmp	r3, #0
 1004 0016 18D0     		beq	.L71
1151:Generated_Source\PSoC4/UART.c ****         {
1152:Generated_Source\PSoC4/UART.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:Generated_Source\PSoC4/UART.c ****             while(string[bufIndex] != (char8) 0)
 1005              		.loc 1 1153 0
 1006 0018 0FE0     		b	.L69
 1007              	.L70:
1154:Generated_Source\PSoC4/UART.c ****             {
1155:Generated_Source\PSoC4/UART.c ****                 UART_PutChar((uint8)string[bufIndex]);
 1008              		.loc 1 1155 0
 1009 001a 0E23     		movs	r3, #14
 1010 001c FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 39


 1011 001e 1B88     		ldrh	r3, [r3]
 1012 0020 7A68     		ldr	r2, [r7, #4]
 1013 0022 D318     		adds	r3, r2, r3
 1014 0024 1B78     		ldrb	r3, [r3]
 1015 0026 1800     		movs	r0, r3
 1016 0028 FFF7FEFF 		bl	UART_PutChar
1156:Generated_Source\PSoC4/UART.c ****                 bufIndex++;
 1017              		.loc 1 1156 0
 1018 002c 0E23     		movs	r3, #14
 1019 002e FB18     		adds	r3, r7, r3
 1020 0030 1A88     		ldrh	r2, [r3]
 1021 0032 0E23     		movs	r3, #14
 1022 0034 FB18     		adds	r3, r7, r3
 1023 0036 0132     		adds	r2, r2, #1
 1024 0038 1A80     		strh	r2, [r3]
 1025              	.L69:
1153:Generated_Source\PSoC4/UART.c ****             {
 1026              		.loc 1 1153 0
 1027 003a 0E23     		movs	r3, #14
 1028 003c FB18     		adds	r3, r7, r3
 1029 003e 1B88     		ldrh	r3, [r3]
 1030 0040 7A68     		ldr	r2, [r7, #4]
 1031 0042 D318     		adds	r3, r2, r3
 1032 0044 1B78     		ldrb	r3, [r3]
 1033 0046 002B     		cmp	r3, #0
 1034 0048 E7D1     		bne	.L70
 1035              	.L71:
1157:Generated_Source\PSoC4/UART.c ****             }
1158:Generated_Source\PSoC4/UART.c ****         }
1159:Generated_Source\PSoC4/UART.c ****     }
 1036              		.loc 1 1159 0
 1037 004a C046     		nop
 1038 004c BD46     		mov	sp, r7
 1039 004e 04B0     		add	sp, sp, #16
 1040              		@ sp needed
 1041 0050 80BD     		pop	{r7, pc}
 1042              	.L73:
 1043 0052 C046     		.align	2
 1044              	.L72:
 1045 0054 00000000 		.word	UART_initVar
 1046              		.cfi_endproc
 1047              	.LFE20:
 1048              		.size	UART_PutString, .-UART_PutString
 1049              		.section	.text.UART_PutArray,"ax",%progbits
 1050              		.align	2
 1051              		.global	UART_PutArray
 1052              		.code	16
 1053              		.thumb_func
 1054              		.type	UART_PutArray, %function
 1055              	UART_PutArray:
 1056              	.LFB21:
1160:Generated_Source\PSoC4/UART.c **** 
1161:Generated_Source\PSoC4/UART.c **** 
1162:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1163:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_PutArray
1164:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1165:Generated_Source\PSoC4/UART.c ****     *
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 40


1166:Generated_Source\PSoC4/UART.c ****     * Summary:
1167:Generated_Source\PSoC4/UART.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:Generated_Source\PSoC4/UART.c ****     *  transmission.
1169:Generated_Source\PSoC4/UART.c ****     *
1170:Generated_Source\PSoC4/UART.c ****     * Parameters:
1171:Generated_Source\PSoC4/UART.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:Generated_Source\PSoC4/UART.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:Generated_Source\PSoC4/UART.c ****     *             Size parameter.
1174:Generated_Source\PSoC4/UART.c ****     *
1175:Generated_Source\PSoC4/UART.c ****     * Return:
1176:Generated_Source\PSoC4/UART.c ****     *  None.
1177:Generated_Source\PSoC4/UART.c ****     *
1178:Generated_Source\PSoC4/UART.c ****     * Global Variables:
1179:Generated_Source\PSoC4/UART.c ****     *  UART_initVar - checked to identify that the component has been
1180:Generated_Source\PSoC4/UART.c ****     *     initialized.
1181:Generated_Source\PSoC4/UART.c ****     *
1182:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1183:Generated_Source\PSoC4/UART.c ****     *  No.
1184:Generated_Source\PSoC4/UART.c ****     *
1185:Generated_Source\PSoC4/UART.c ****     * Theory:
1186:Generated_Source\PSoC4/UART.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:Generated_Source\PSoC4/UART.c ****     *  function blocks until the last character of the string is loaded into the
1188:Generated_Source\PSoC4/UART.c ****     *  TX buffer.
1189:Generated_Source\PSoC4/UART.c ****     *
1190:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1191:Generated_Source\PSoC4/UART.c ****     void UART_PutArray(const uint8 string[], uint8 byteCount)
1192:Generated_Source\PSoC4/UART.c ****                                                                     
1193:Generated_Source\PSoC4/UART.c ****     {
 1057              		.loc 1 1193 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 16
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061 0000 80B5     		push	{r7, lr}
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0002 84B0     		sub	sp, sp, #16
 1066              		.cfi_def_cfa_offset 24
 1067 0004 00AF     		add	r7, sp, #0
 1068              		.cfi_def_cfa_register 7
 1069 0006 7860     		str	r0, [r7, #4]
 1070 0008 0A00     		movs	r2, r1
 1071 000a FB1C     		adds	r3, r7, #3
 1072 000c 1A70     		strb	r2, [r3]
1194:Generated_Source\PSoC4/UART.c ****         uint8 bufIndex = 0u;
 1073              		.loc 1 1194 0
 1074 000e 0F23     		movs	r3, #15
 1075 0010 FB18     		adds	r3, r7, r3
 1076 0012 0022     		movs	r2, #0
 1077 0014 1A70     		strb	r2, [r3]
1195:Generated_Source\PSoC4/UART.c **** 
1196:Generated_Source\PSoC4/UART.c ****         /* If not Initialized then skip this function */
1197:Generated_Source\PSoC4/UART.c ****         if(UART_initVar != 0u)
 1078              		.loc 1 1197 0
 1079 0016 104B     		ldr	r3, .L79
 1080 0018 1B78     		ldrb	r3, [r3]
 1081 001a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 41


 1082 001c 17D0     		beq	.L78
1198:Generated_Source\PSoC4/UART.c ****         {
1199:Generated_Source\PSoC4/UART.c ****             while(bufIndex < byteCount)
 1083              		.loc 1 1199 0
 1084 001e 0FE0     		b	.L76
 1085              	.L77:
1200:Generated_Source\PSoC4/UART.c ****             {
1201:Generated_Source\PSoC4/UART.c ****                 UART_PutChar(string[bufIndex]);
 1086              		.loc 1 1201 0
 1087 0020 0F23     		movs	r3, #15
 1088 0022 FB18     		adds	r3, r7, r3
 1089 0024 1B78     		ldrb	r3, [r3]
 1090 0026 7A68     		ldr	r2, [r7, #4]
 1091 0028 D318     		adds	r3, r2, r3
 1092 002a 1B78     		ldrb	r3, [r3]
 1093 002c 1800     		movs	r0, r3
 1094 002e FFF7FEFF 		bl	UART_PutChar
1202:Generated_Source\PSoC4/UART.c ****                 bufIndex++;
 1095              		.loc 1 1202 0
 1096 0032 0F23     		movs	r3, #15
 1097 0034 FB18     		adds	r3, r7, r3
 1098 0036 1A78     		ldrb	r2, [r3]
 1099 0038 0F23     		movs	r3, #15
 1100 003a FB18     		adds	r3, r7, r3
 1101 003c 0132     		adds	r2, r2, #1
 1102 003e 1A70     		strb	r2, [r3]
 1103              	.L76:
1199:Generated_Source\PSoC4/UART.c ****             {
 1104              		.loc 1 1199 0
 1105 0040 0F23     		movs	r3, #15
 1106 0042 FA18     		adds	r2, r7, r3
 1107 0044 FB1C     		adds	r3, r7, #3
 1108 0046 1278     		ldrb	r2, [r2]
 1109 0048 1B78     		ldrb	r3, [r3]
 1110 004a 9A42     		cmp	r2, r3
 1111 004c E8D3     		bcc	.L77
 1112              	.L78:
1203:Generated_Source\PSoC4/UART.c ****             }
1204:Generated_Source\PSoC4/UART.c ****         }
1205:Generated_Source\PSoC4/UART.c ****     }
 1113              		.loc 1 1205 0
 1114 004e C046     		nop
 1115 0050 BD46     		mov	sp, r7
 1116 0052 04B0     		add	sp, sp, #16
 1117              		@ sp needed
 1118 0054 80BD     		pop	{r7, pc}
 1119              	.L80:
 1120 0056 C046     		.align	2
 1121              	.L79:
 1122 0058 00000000 		.word	UART_initVar
 1123              		.cfi_endproc
 1124              	.LFE21:
 1125              		.size	UART_PutArray, .-UART_PutArray
 1126              		.section	.text.UART_PutCRLF,"ax",%progbits
 1127              		.align	2
 1128              		.global	UART_PutCRLF
 1129              		.code	16
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 42


 1130              		.thumb_func
 1131              		.type	UART_PutCRLF, %function
 1132              	UART_PutCRLF:
 1133              	.LFB22:
1206:Generated_Source\PSoC4/UART.c **** 
1207:Generated_Source\PSoC4/UART.c **** 
1208:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1209:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_PutCRLF
1210:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1211:Generated_Source\PSoC4/UART.c ****     *
1212:Generated_Source\PSoC4/UART.c ****     * Summary:
1213:Generated_Source\PSoC4/UART.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:Generated_Source\PSoC4/UART.c ****     *  (0x0A) to the transmit buffer.
1215:Generated_Source\PSoC4/UART.c ****     *
1216:Generated_Source\PSoC4/UART.c ****     * Parameters:
1217:Generated_Source\PSoC4/UART.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:Generated_Source\PSoC4/UART.c ****     *
1219:Generated_Source\PSoC4/UART.c ****     * Return:
1220:Generated_Source\PSoC4/UART.c ****     *  None.
1221:Generated_Source\PSoC4/UART.c ****     *
1222:Generated_Source\PSoC4/UART.c ****     * Global Variables:
1223:Generated_Source\PSoC4/UART.c ****     *  UART_initVar - checked to identify that the component has been
1224:Generated_Source\PSoC4/UART.c ****     *     initialized.
1225:Generated_Source\PSoC4/UART.c ****     *
1226:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1227:Generated_Source\PSoC4/UART.c ****     *  No.
1228:Generated_Source\PSoC4/UART.c ****     *
1229:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1230:Generated_Source\PSoC4/UART.c ****     void UART_PutCRLF(uint8 txDataByte) 
1231:Generated_Source\PSoC4/UART.c ****     {
 1134              		.loc 1 1231 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 8
 1137              		@ frame_needed = 1, uses_anonymous_args = 0
 1138 0000 80B5     		push	{r7, lr}
 1139              		.cfi_def_cfa_offset 8
 1140              		.cfi_offset 7, -8
 1141              		.cfi_offset 14, -4
 1142 0002 82B0     		sub	sp, sp, #8
 1143              		.cfi_def_cfa_offset 16
 1144 0004 00AF     		add	r7, sp, #0
 1145              		.cfi_def_cfa_register 7
 1146 0006 0200     		movs	r2, r0
 1147 0008 FB1D     		adds	r3, r7, #7
 1148 000a 1A70     		strb	r2, [r3]
1232:Generated_Source\PSoC4/UART.c ****         /* If not Initialized then skip this function */
1233:Generated_Source\PSoC4/UART.c ****         if(UART_initVar != 0u)
 1149              		.loc 1 1233 0
 1150 000c 094B     		ldr	r3, .L84
 1151 000e 1B78     		ldrb	r3, [r3]
 1152 0010 002B     		cmp	r3, #0
 1153 0012 0AD0     		beq	.L83
1234:Generated_Source\PSoC4/UART.c ****         {
1235:Generated_Source\PSoC4/UART.c ****             UART_PutChar(txDataByte);
 1154              		.loc 1 1235 0
 1155 0014 FB1D     		adds	r3, r7, #7
 1156 0016 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 43


 1157 0018 1800     		movs	r0, r3
 1158 001a FFF7FEFF 		bl	UART_PutChar
1236:Generated_Source\PSoC4/UART.c ****             UART_PutChar(0x0Du);
 1159              		.loc 1 1236 0
 1160 001e 0D20     		movs	r0, #13
 1161 0020 FFF7FEFF 		bl	UART_PutChar
1237:Generated_Source\PSoC4/UART.c ****             UART_PutChar(0x0Au);
 1162              		.loc 1 1237 0
 1163 0024 0A20     		movs	r0, #10
 1164 0026 FFF7FEFF 		bl	UART_PutChar
 1165              	.L83:
1238:Generated_Source\PSoC4/UART.c ****         }
1239:Generated_Source\PSoC4/UART.c ****     }
 1166              		.loc 1 1239 0
 1167 002a C046     		nop
 1168 002c BD46     		mov	sp, r7
 1169 002e 02B0     		add	sp, sp, #8
 1170              		@ sp needed
 1171 0030 80BD     		pop	{r7, pc}
 1172              	.L85:
 1173 0032 C046     		.align	2
 1174              	.L84:
 1175 0034 00000000 		.word	UART_initVar
 1176              		.cfi_endproc
 1177              	.LFE22:
 1178              		.size	UART_PutCRLF, .-UART_PutCRLF
 1179              		.section	.text.UART_GetTxBufferSize,"ax",%progbits
 1180              		.align	2
 1181              		.global	UART_GetTxBufferSize
 1182              		.code	16
 1183              		.thumb_func
 1184              		.type	UART_GetTxBufferSize, %function
 1185              	UART_GetTxBufferSize:
 1186              	.LFB23:
1240:Generated_Source\PSoC4/UART.c **** 
1241:Generated_Source\PSoC4/UART.c **** 
1242:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1243:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_GetTxBufferSize
1244:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1245:Generated_Source\PSoC4/UART.c ****     *
1246:Generated_Source\PSoC4/UART.c ****     * Summary:
1247:Generated_Source\PSoC4/UART.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:Generated_Source\PSoC4/UART.c ****     *  transmitted.
1249:Generated_Source\PSoC4/UART.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:Generated_Source\PSoC4/UART.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:Generated_Source\PSoC4/UART.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:Generated_Source\PSoC4/UART.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:Generated_Source\PSoC4/UART.c ****     *    TX FIFO do not count.
1254:Generated_Source\PSoC4/UART.c ****     *
1255:Generated_Source\PSoC4/UART.c ****     * Parameters:
1256:Generated_Source\PSoC4/UART.c ****     *  None.
1257:Generated_Source\PSoC4/UART.c ****     *
1258:Generated_Source\PSoC4/UART.c ****     * Return:
1259:Generated_Source\PSoC4/UART.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:Generated_Source\PSoC4/UART.c ****     *  Buffer Size parameter.
1261:Generated_Source\PSoC4/UART.c ****     *
1262:Generated_Source\PSoC4/UART.c ****     * Global Variables:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 44


1263:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferWrite - used to calculate left space.
1264:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferRead - used to calculate left space.
1265:Generated_Source\PSoC4/UART.c ****     *
1266:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1267:Generated_Source\PSoC4/UART.c ****     *  No.
1268:Generated_Source\PSoC4/UART.c ****     *
1269:Generated_Source\PSoC4/UART.c ****     * Theory:
1270:Generated_Source\PSoC4/UART.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:Generated_Source\PSoC4/UART.c ****     *
1272:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1273:Generated_Source\PSoC4/UART.c ****     uint8 UART_GetTxBufferSize(void)
1274:Generated_Source\PSoC4/UART.c ****                                                             
1275:Generated_Source\PSoC4/UART.c ****     {
 1187              		.loc 1 1275 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 8
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191 0000 80B5     		push	{r7, lr}
 1192              		.cfi_def_cfa_offset 8
 1193              		.cfi_offset 7, -8
 1194              		.cfi_offset 14, -4
 1195 0002 82B0     		sub	sp, sp, #8
 1196              		.cfi_def_cfa_offset 16
 1197 0004 00AF     		add	r7, sp, #0
 1198              		.cfi_def_cfa_register 7
1276:Generated_Source\PSoC4/UART.c ****         uint8 size;
1277:Generated_Source\PSoC4/UART.c **** 
1278:Generated_Source\PSoC4/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1279:Generated_Source\PSoC4/UART.c **** 
1280:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt. */
1281:Generated_Source\PSoC4/UART.c ****         UART_DisableTxInt();
1282:Generated_Source\PSoC4/UART.c **** 
1283:Generated_Source\PSoC4/UART.c ****         if(UART_txBufferRead == UART_txBufferWrite)
1284:Generated_Source\PSoC4/UART.c ****         {
1285:Generated_Source\PSoC4/UART.c ****             size = 0u;
1286:Generated_Source\PSoC4/UART.c ****         }
1287:Generated_Source\PSoC4/UART.c ****         else if(UART_txBufferRead < UART_txBufferWrite)
1288:Generated_Source\PSoC4/UART.c ****         {
1289:Generated_Source\PSoC4/UART.c ****             size = (UART_txBufferWrite - UART_txBufferRead);
1290:Generated_Source\PSoC4/UART.c ****         }
1291:Generated_Source\PSoC4/UART.c ****         else
1292:Generated_Source\PSoC4/UART.c ****         {
1293:Generated_Source\PSoC4/UART.c ****             size = (UART_TX_BUFFER_SIZE - UART_txBufferRead) +
1294:Generated_Source\PSoC4/UART.c ****                     UART_txBufferWrite;
1295:Generated_Source\PSoC4/UART.c ****         }
1296:Generated_Source\PSoC4/UART.c **** 
1297:Generated_Source\PSoC4/UART.c ****         UART_EnableTxInt();
1298:Generated_Source\PSoC4/UART.c **** 
1299:Generated_Source\PSoC4/UART.c ****     #else
1300:Generated_Source\PSoC4/UART.c **** 
1301:Generated_Source\PSoC4/UART.c ****         size = UART_TXSTATUS_REG;
 1199              		.loc 1 1301 0
 1200 0006 0F4A     		ldr	r2, .L91
 1201 0008 FB1D     		adds	r3, r7, #7
 1202 000a 1278     		ldrb	r2, [r2]
 1203 000c 1A70     		strb	r2, [r3]
1302:Generated_Source\PSoC4/UART.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 45


1303:Generated_Source\PSoC4/UART.c ****         /* Is the fifo is full. */
1304:Generated_Source\PSoC4/UART.c ****         if((size & UART_TX_STS_FIFO_FULL) != 0u)
 1204              		.loc 1 1304 0
 1205 000e FB1D     		adds	r3, r7, #7
 1206 0010 1B78     		ldrb	r3, [r3]
 1207 0012 0422     		movs	r2, #4
 1208 0014 1340     		ands	r3, r2
 1209 0016 03D0     		beq	.L87
1305:Generated_Source\PSoC4/UART.c ****         {
1306:Generated_Source\PSoC4/UART.c ****             size = UART_FIFO_LENGTH;
 1210              		.loc 1 1306 0
 1211 0018 FB1D     		adds	r3, r7, #7
 1212 001a 0422     		movs	r2, #4
 1213 001c 1A70     		strb	r2, [r3]
 1214 001e 0BE0     		b	.L88
 1215              	.L87:
1307:Generated_Source\PSoC4/UART.c ****         }
1308:Generated_Source\PSoC4/UART.c ****         else if((size & UART_TX_STS_FIFO_EMPTY) != 0u)
 1216              		.loc 1 1308 0
 1217 0020 FB1D     		adds	r3, r7, #7
 1218 0022 1B78     		ldrb	r3, [r3]
 1219 0024 0222     		movs	r2, #2
 1220 0026 1340     		ands	r3, r2
 1221 0028 03D0     		beq	.L89
1309:Generated_Source\PSoC4/UART.c ****         {
1310:Generated_Source\PSoC4/UART.c ****             size = 0u;
 1222              		.loc 1 1310 0
 1223 002a FB1D     		adds	r3, r7, #7
 1224 002c 0022     		movs	r2, #0
 1225 002e 1A70     		strb	r2, [r3]
 1226 0030 02E0     		b	.L88
 1227              	.L89:
1311:Generated_Source\PSoC4/UART.c ****         }
1312:Generated_Source\PSoC4/UART.c ****         else
1313:Generated_Source\PSoC4/UART.c ****         {
1314:Generated_Source\PSoC4/UART.c ****             /* We only know there is data in the fifo. */
1315:Generated_Source\PSoC4/UART.c ****             size = 1u;
 1228              		.loc 1 1315 0
 1229 0032 FB1D     		adds	r3, r7, #7
 1230 0034 0122     		movs	r2, #1
 1231 0036 1A70     		strb	r2, [r3]
 1232              	.L88:
1316:Generated_Source\PSoC4/UART.c ****         }
1317:Generated_Source\PSoC4/UART.c **** 
1318:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1319:Generated_Source\PSoC4/UART.c **** 
1320:Generated_Source\PSoC4/UART.c ****     return(size);
 1233              		.loc 1 1320 0
 1234 0038 FB1D     		adds	r3, r7, #7
 1235 003a 1B78     		ldrb	r3, [r3]
1321:Generated_Source\PSoC4/UART.c ****     }
 1236              		.loc 1 1321 0
 1237 003c 1800     		movs	r0, r3
 1238 003e BD46     		mov	sp, r7
 1239 0040 02B0     		add	sp, sp, #8
 1240              		@ sp needed
 1241 0042 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 46


 1242              	.L92:
 1243              		.align	2
 1244              	.L91:
 1245 0044 60000F40 		.word	1074724960
 1246              		.cfi_endproc
 1247              	.LFE23:
 1248              		.size	UART_GetTxBufferSize, .-UART_GetTxBufferSize
 1249              		.section	.text.UART_ClearTxBuffer,"ax",%progbits
 1250              		.align	2
 1251              		.global	UART_ClearTxBuffer
 1252              		.code	16
 1253              		.thumb_func
 1254              		.type	UART_ClearTxBuffer, %function
 1255              	UART_ClearTxBuffer:
 1256              	.LFB24:
1322:Generated_Source\PSoC4/UART.c **** 
1323:Generated_Source\PSoC4/UART.c **** 
1324:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1325:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_ClearTxBuffer
1326:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1327:Generated_Source\PSoC4/UART.c ****     *
1328:Generated_Source\PSoC4/UART.c ****     * Summary:
1329:Generated_Source\PSoC4/UART.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:Generated_Source\PSoC4/UART.c ****     *
1331:Generated_Source\PSoC4/UART.c ****     * Parameters:
1332:Generated_Source\PSoC4/UART.c ****     *  None.
1333:Generated_Source\PSoC4/UART.c ****     *
1334:Generated_Source\PSoC4/UART.c ****     * Return:
1335:Generated_Source\PSoC4/UART.c ****     *  None.
1336:Generated_Source\PSoC4/UART.c ****     *
1337:Generated_Source\PSoC4/UART.c ****     * Global Variables:
1338:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferWrite - cleared to zero.
1339:Generated_Source\PSoC4/UART.c ****     *  UART_txBufferRead - cleared to zero.
1340:Generated_Source\PSoC4/UART.c ****     *
1341:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1342:Generated_Source\PSoC4/UART.c ****     *  No.
1343:Generated_Source\PSoC4/UART.c ****     *
1344:Generated_Source\PSoC4/UART.c ****     * Theory:
1345:Generated_Source\PSoC4/UART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:Generated_Source\PSoC4/UART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:Generated_Source\PSoC4/UART.c ****     *  remained in the RAM.
1348:Generated_Source\PSoC4/UART.c ****     *
1349:Generated_Source\PSoC4/UART.c ****     * Side Effects:
1350:Generated_Source\PSoC4/UART.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:Generated_Source\PSoC4/UART.c ****     *  transmitting finishes transmitting.
1352:Generated_Source\PSoC4/UART.c ****     *
1353:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1354:Generated_Source\PSoC4/UART.c ****     void UART_ClearTxBuffer(void) 
1355:Generated_Source\PSoC4/UART.c ****     {
 1257              		.loc 1 1355 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 8
 1260              		@ frame_needed = 1, uses_anonymous_args = 0
 1261 0000 90B5     		push	{r4, r7, lr}
 1262              		.cfi_def_cfa_offset 12
 1263              		.cfi_offset 4, -12
 1264              		.cfi_offset 7, -8
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 47


 1265              		.cfi_offset 14, -4
 1266 0002 83B0     		sub	sp, sp, #12
 1267              		.cfi_def_cfa_offset 24
 1268 0004 00AF     		add	r7, sp, #0
 1269              		.cfi_def_cfa_register 7
1356:Generated_Source\PSoC4/UART.c ****         uint8 enableInterrupts;
1357:Generated_Source\PSoC4/UART.c **** 
1358:Generated_Source\PSoC4/UART.c ****         enableInterrupts = CyEnterCriticalSection();
 1270              		.loc 1 1358 0
 1271 0006 FC1D     		adds	r4, r7, #7
 1272 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 1273 000c 0300     		movs	r3, r0
 1274 000e 2370     		strb	r3, [r4]
1359:Generated_Source\PSoC4/UART.c ****         /* Clear the HW FIFO */
1360:Generated_Source\PSoC4/UART.c ****         UART_TXDATA_AUX_CTL_REG |= (uint8)  UART_TX_FIFO_CLR;
 1275              		.loc 1 1360 0
 1276 0010 0C4A     		ldr	r2, .L94
 1277 0012 0C4B     		ldr	r3, .L94
 1278 0014 1B78     		ldrb	r3, [r3]
 1279 0016 DBB2     		uxtb	r3, r3
 1280 0018 0121     		movs	r1, #1
 1281 001a 0B43     		orrs	r3, r1
 1282 001c DBB2     		uxtb	r3, r3
 1283 001e 1370     		strb	r3, [r2]
1361:Generated_Source\PSoC4/UART.c ****         UART_TXDATA_AUX_CTL_REG &= (uint8) ~UART_TX_FIFO_CLR;
 1284              		.loc 1 1361 0
 1285 0020 084A     		ldr	r2, .L94
 1286 0022 084B     		ldr	r3, .L94
 1287 0024 1B78     		ldrb	r3, [r3]
 1288 0026 DBB2     		uxtb	r3, r3
 1289 0028 0121     		movs	r1, #1
 1290 002a 8B43     		bics	r3, r1
 1291 002c DBB2     		uxtb	r3, r3
 1292 002e 1370     		strb	r3, [r2]
1362:Generated_Source\PSoC4/UART.c ****         CyExitCriticalSection(enableInterrupts);
 1293              		.loc 1 1362 0
 1294 0030 FB1D     		adds	r3, r7, #7
 1295 0032 1B78     		ldrb	r3, [r3]
 1296 0034 1800     		movs	r0, r3
 1297 0036 FFF7FEFF 		bl	CyExitCriticalSection
1363:Generated_Source\PSoC4/UART.c **** 
1364:Generated_Source\PSoC4/UART.c ****     #if (UART_TX_INTERRUPT_ENABLED)
1365:Generated_Source\PSoC4/UART.c **** 
1366:Generated_Source\PSoC4/UART.c ****         /* Protect variables that could change on interrupt. */
1367:Generated_Source\PSoC4/UART.c ****         UART_DisableTxInt();
1368:Generated_Source\PSoC4/UART.c **** 
1369:Generated_Source\PSoC4/UART.c ****         UART_txBufferRead = 0u;
1370:Generated_Source\PSoC4/UART.c ****         UART_txBufferWrite = 0u;
1371:Generated_Source\PSoC4/UART.c **** 
1372:Generated_Source\PSoC4/UART.c ****         /* Enable Tx interrupt. */
1373:Generated_Source\PSoC4/UART.c ****         UART_EnableTxInt();
1374:Generated_Source\PSoC4/UART.c **** 
1375:Generated_Source\PSoC4/UART.c ****     #endif /* (UART_TX_INTERRUPT_ENABLED) */
1376:Generated_Source\PSoC4/UART.c ****     }
 1298              		.loc 1 1376 0
 1299 003a C046     		nop
 1300 003c BD46     		mov	sp, r7
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 48


 1301 003e 03B0     		add	sp, sp, #12
 1302              		@ sp needed
 1303 0040 90BD     		pop	{r4, r7, pc}
 1304              	.L95:
 1305 0042 C046     		.align	2
 1306              	.L94:
 1307 0044 90000F40 		.word	1074725008
 1308              		.cfi_endproc
 1309              	.LFE24:
 1310              		.size	UART_ClearTxBuffer, .-UART_ClearTxBuffer
 1311              		.section	.text.UART_SendBreak,"ax",%progbits
 1312              		.align	2
 1313              		.global	UART_SendBreak
 1314              		.code	16
 1315              		.thumb_func
 1316              		.type	UART_SendBreak, %function
 1317              	UART_SendBreak:
 1318              	.LFB25:
1377:Generated_Source\PSoC4/UART.c **** 
1378:Generated_Source\PSoC4/UART.c **** 
1379:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1380:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SendBreak
1381:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1382:Generated_Source\PSoC4/UART.c ****     *
1383:Generated_Source\PSoC4/UART.c ****     * Summary:
1384:Generated_Source\PSoC4/UART.c ****     *  Transmits a break signal on the bus.
1385:Generated_Source\PSoC4/UART.c ****     *
1386:Generated_Source\PSoC4/UART.c ****     * Parameters:
1387:Generated_Source\PSoC4/UART.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:Generated_Source\PSoC4/UART.c ****     *   UART_SEND_BREAK - Initialize registers for break, send the Break
1389:Generated_Source\PSoC4/UART.c ****     *       signal and return immediately.
1390:Generated_Source\PSoC4/UART.c ****     *   UART_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:Generated_Source\PSoC4/UART.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:Generated_Source\PSoC4/UART.c ****     *   UART_REINIT - Reinitialize registers to normal transmission mode
1393:Generated_Source\PSoC4/UART.c ****     *       then return.
1394:Generated_Source\PSoC4/UART.c ****     *   UART_SEND_WAIT_REINIT - Performs both options: 
1395:Generated_Source\PSoC4/UART.c ****     *      UART_SEND_BREAK and UART_WAIT_FOR_COMPLETE_REINIT.
1396:Generated_Source\PSoC4/UART.c ****     *      This option is recommended for most cases.
1397:Generated_Source\PSoC4/UART.c ****     *
1398:Generated_Source\PSoC4/UART.c ****     * Return:
1399:Generated_Source\PSoC4/UART.c ****     *  None.
1400:Generated_Source\PSoC4/UART.c ****     *
1401:Generated_Source\PSoC4/UART.c ****     * Global Variables:
1402:Generated_Source\PSoC4/UART.c ****     *  UART_initVar - checked to identify that the component has been
1403:Generated_Source\PSoC4/UART.c ****     *     initialized.
1404:Generated_Source\PSoC4/UART.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:Generated_Source\PSoC4/UART.c ****     *
1406:Generated_Source\PSoC4/UART.c ****     * Reentrant:
1407:Generated_Source\PSoC4/UART.c ****     *  No.
1408:Generated_Source\PSoC4/UART.c ****     *
1409:Generated_Source\PSoC4/UART.c ****     * Theory:
1410:Generated_Source\PSoC4/UART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:Generated_Source\PSoC4/UART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:Generated_Source\PSoC4/UART.c ****     *  operation.
1413:Generated_Source\PSoC4/UART.c ****     *  There are 3 variants for this API usage:
1414:Generated_Source\PSoC4/UART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:Generated_Source\PSoC4/UART.c ****     *     configuration returning. Function will block CPU until transmission
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 49


1416:Generated_Source\PSoC4/UART.c ****     *     complete.
1417:Generated_Source\PSoC4/UART.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:Generated_Source\PSoC4/UART.c ****     *     operation
1419:Generated_Source\PSoC4/UART.c ****     *     Example for this case:
1420:Generated_Source\PSoC4/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:Generated_Source\PSoC4/UART.c ****     *         Add your code here to use CPU time
1422:Generated_Source\PSoC4/UART.c ****     *     SendBreak(1);     - complete Break operation
1423:Generated_Source\PSoC4/UART.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:Generated_Source\PSoC4/UART.c ****     *     complete break operation.
1425:Generated_Source\PSoC4/UART.c ****     *     Example for this case:
1426:Generated_Source\PSoC4/UART.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:Generated_Source\PSoC4/UART.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:Generated_Source\PSoC4/UART.c ****     *         Add your code here to use CPU time
1429:Generated_Source\PSoC4/UART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1430:Generated_Source\PSoC4/UART.c ****     *     SendBreak(2);     - complete Break operation
1431:Generated_Source\PSoC4/UART.c ****     *
1432:Generated_Source\PSoC4/UART.c ****     * Side Effects:
1433:Generated_Source\PSoC4/UART.c ****     *  The UART_SendBreak() function initializes registers to send a
1434:Generated_Source\PSoC4/UART.c ****     *  break signal.
1435:Generated_Source\PSoC4/UART.c ****     *  Break signal length depends on the break signal bits configuration.
1436:Generated_Source\PSoC4/UART.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:Generated_Source\PSoC4/UART.c ****     *  communication can continue.
1438:Generated_Source\PSoC4/UART.c ****     *
1439:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1440:Generated_Source\PSoC4/UART.c ****     void UART_SendBreak(uint8 retMode) 
1441:Generated_Source\PSoC4/UART.c ****     {
 1319              		.loc 1 1441 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 16
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 84B0     		sub	sp, sp, #16
 1328              		.cfi_def_cfa_offset 24
 1329 0004 00AF     		add	r7, sp, #0
 1330              		.cfi_def_cfa_register 7
 1331 0006 0200     		movs	r2, r0
 1332 0008 FB1D     		adds	r3, r7, #7
 1333 000a 1A70     		strb	r2, [r3]
1442:Generated_Source\PSoC4/UART.c **** 
1443:Generated_Source\PSoC4/UART.c ****         /* If not Initialized then skip this function*/
1444:Generated_Source\PSoC4/UART.c ****         if(UART_initVar != 0u)
 1334              		.loc 1 1444 0
 1335 000c 254B     		ldr	r3, .L105
 1336 000e 1B78     		ldrb	r3, [r3]
 1337 0010 002B     		cmp	r3, #0
 1338 0012 43D0     		beq	.L104
 1339              	.LBB2:
1445:Generated_Source\PSoC4/UART.c ****         {
1446:Generated_Source\PSoC4/UART.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:Generated_Source\PSoC4/UART.c ****             /* When that is done then reset the counter value back */
1448:Generated_Source\PSoC4/UART.c ****             uint8 tmpStat;
1449:Generated_Source\PSoC4/UART.c **** 
1450:Generated_Source\PSoC4/UART.c ****         #if(UART_HD_ENABLED) /* Half Duplex mode*/
1451:Generated_Source\PSoC4/UART.c **** 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 50


1452:Generated_Source\PSoC4/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
1453:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT ) )
1454:Generated_Source\PSoC4/UART.c ****             {
1455:Generated_Source\PSoC4/UART.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:Generated_Source\PSoC4/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() |
1457:Generated_Source\PSoC4/UART.c ****                                                       UART_CTRL_HD_SEND_BREAK);
1458:Generated_Source\PSoC4/UART.c ****                 /* Send zeros */
1459:Generated_Source\PSoC4/UART.c ****                 UART_TXDATA_REG = 0u;
1460:Generated_Source\PSoC4/UART.c **** 
1461:Generated_Source\PSoC4/UART.c ****                 do /* Wait until transmit starts */
1462:Generated_Source\PSoC4/UART.c ****                 {
1463:Generated_Source\PSoC4/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1464:Generated_Source\PSoC4/UART.c ****                 }
1465:Generated_Source\PSoC4/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
1466:Generated_Source\PSoC4/UART.c ****             }
1467:Generated_Source\PSoC4/UART.c **** 
1468:Generated_Source\PSoC4/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1469:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1470:Generated_Source\PSoC4/UART.c ****             {
1471:Generated_Source\PSoC4/UART.c ****                 do /* Wait until transmit complete */
1472:Generated_Source\PSoC4/UART.c ****                 {
1473:Generated_Source\PSoC4/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
1474:Generated_Source\PSoC4/UART.c ****                 }
1475:Generated_Source\PSoC4/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
1476:Generated_Source\PSoC4/UART.c ****             }
1477:Generated_Source\PSoC4/UART.c **** 
1478:Generated_Source\PSoC4/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
1479:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_REINIT) ||
1480:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1481:Generated_Source\PSoC4/UART.c ****             {
1482:Generated_Source\PSoC4/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1483:Generated_Source\PSoC4/UART.c ****                                               (uint8)~UART_CTRL_HD_SEND_BREAK);
1484:Generated_Source\PSoC4/UART.c ****             }
1485:Generated_Source\PSoC4/UART.c **** 
1486:Generated_Source\PSoC4/UART.c ****         #else /* UART_HD_ENABLED Full Duplex mode */
1487:Generated_Source\PSoC4/UART.c **** 
1488:Generated_Source\PSoC4/UART.c ****             static uint8 txPeriod;
1489:Generated_Source\PSoC4/UART.c **** 
1490:Generated_Source\PSoC4/UART.c ****             if( (retMode == UART_SEND_BREAK) ||
 1340              		.loc 1 1490 0
 1341 0014 FB1D     		adds	r3, r7, #7
 1342 0016 1B78     		ldrb	r3, [r3]
 1343 0018 002B     		cmp	r3, #0
 1344 001a 03D0     		beq	.L98
 1345              		.loc 1 1490 0 is_stmt 0 discriminator 1
 1346 001c FB1D     		adds	r3, r7, #7
 1347 001e 1B78     		ldrb	r3, [r3]
 1348 0020 032B     		cmp	r3, #3
 1349 0022 15D1     		bne	.L99
 1350              	.L98:
1491:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1492:Generated_Source\PSoC4/UART.c ****             {
1493:Generated_Source\PSoC4/UART.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:Generated_Source\PSoC4/UART.c ****                 #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1495:Generated_Source\PSoC4/UART.c ****                                     (UART_PARITY_TYPE_SW != 0u) )
1496:Generated_Source\PSoC4/UART.c ****                     UART_WriteControlRegister(UART_ReadControlRegister() |
1497:Generated_Source\PSoC4/UART.c ****                                                           UART_CTRL_HD_SEND_BREAK);
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 51


1498:Generated_Source\PSoC4/UART.c ****                 #endif /* End UART_PARITY_TYPE != UART__B_UART__NONE_REVB  */
1499:Generated_Source\PSoC4/UART.c **** 
1500:Generated_Source\PSoC4/UART.c ****                 #if(UART_TXCLKGEN_DP)
1501:Generated_Source\PSoC4/UART.c ****                     txPeriod = UART_TXBITCLKTX_COMPLETE_REG;
 1351              		.loc 1 1501 0 is_stmt 1
 1352 0024 204B     		ldr	r3, .L105+4
 1353 0026 1B78     		ldrb	r3, [r3]
 1354 0028 DAB2     		uxtb	r2, r3
 1355 002a 204B     		ldr	r3, .L105+8
 1356 002c 1A70     		strb	r2, [r3]
1502:Generated_Source\PSoC4/UART.c ****                     UART_TXBITCLKTX_COMPLETE_REG = UART_TXBITCTR_BREAKBITS;
 1357              		.loc 1 1502 0
 1358 002e 1E4B     		ldr	r3, .L105+4
 1359 0030 6722     		movs	r2, #103
 1360 0032 1A70     		strb	r2, [r3]
1503:Generated_Source\PSoC4/UART.c ****                 #else
1504:Generated_Source\PSoC4/UART.c ****                     txPeriod = UART_TXBITCTR_PERIOD_REG;
1505:Generated_Source\PSoC4/UART.c ****                     UART_TXBITCTR_PERIOD_REG = UART_TXBITCTR_BREAKBITS8X;
1506:Generated_Source\PSoC4/UART.c ****                 #endif /* End UART_TXCLKGEN_DP */
1507:Generated_Source\PSoC4/UART.c **** 
1508:Generated_Source\PSoC4/UART.c ****                 /* Send zeros */
1509:Generated_Source\PSoC4/UART.c ****                 UART_TXDATA_REG = 0u;
 1361              		.loc 1 1509 0
 1362 0034 1E4B     		ldr	r3, .L105+12
 1363 0036 0022     		movs	r2, #0
 1364 0038 1A70     		strb	r2, [r3]
 1365              	.L100:
1510:Generated_Source\PSoC4/UART.c **** 
1511:Generated_Source\PSoC4/UART.c ****                 do /* Wait until transmit starts */
1512:Generated_Source\PSoC4/UART.c ****                 {
1513:Generated_Source\PSoC4/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
 1366              		.loc 1 1513 0 discriminator 1
 1367 003a 1E4A     		ldr	r2, .L105+16
 1368 003c 0F23     		movs	r3, #15
 1369 003e FB18     		adds	r3, r7, r3
 1370 0040 1278     		ldrb	r2, [r2]
 1371 0042 1A70     		strb	r2, [r3]
1514:Generated_Source\PSoC4/UART.c ****                 }
1515:Generated_Source\PSoC4/UART.c ****                 while((tmpStat & UART_TX_STS_FIFO_EMPTY) != 0u);
 1372              		.loc 1 1515 0 discriminator 1
 1373 0044 0F23     		movs	r3, #15
 1374 0046 FB18     		adds	r3, r7, r3
 1375 0048 1B78     		ldrb	r3, [r3]
 1376 004a 0222     		movs	r2, #2
 1377 004c 1340     		ands	r3, r2
 1378 004e F4D1     		bne	.L100
 1379              	.L99:
1516:Generated_Source\PSoC4/UART.c ****             }
1517:Generated_Source\PSoC4/UART.c **** 
1518:Generated_Source\PSoC4/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 1380              		.loc 1 1518 0
 1381 0050 FB1D     		adds	r3, r7, #7
 1382 0052 1B78     		ldrb	r3, [r3]
 1383 0054 012B     		cmp	r3, #1
 1384 0056 03D0     		beq	.L101
 1385              		.loc 1 1518 0 is_stmt 0 discriminator 1
 1386 0058 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 52


 1387 005a 1B78     		ldrb	r3, [r3]
 1388 005c 032B     		cmp	r3, #3
 1389 005e 0DD1     		bne	.L102
 1390              	.L101:
1519:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1520:Generated_Source\PSoC4/UART.c ****             {
1521:Generated_Source\PSoC4/UART.c ****                 do /* Wait until transmit complete */
1522:Generated_Source\PSoC4/UART.c ****                 {
1523:Generated_Source\PSoC4/UART.c ****                     tmpStat = UART_TXSTATUS_REG;
 1391              		.loc 1 1523 0 is_stmt 1 discriminator 1
 1392 0060 144A     		ldr	r2, .L105+16
 1393 0062 0F23     		movs	r3, #15
 1394 0064 FB18     		adds	r3, r7, r3
 1395 0066 1278     		ldrb	r2, [r2]
 1396 0068 1A70     		strb	r2, [r3]
1524:Generated_Source\PSoC4/UART.c ****                 }
1525:Generated_Source\PSoC4/UART.c ****                 while(((uint8)~tmpStat & UART_TX_STS_COMPLETE) != 0u);
 1397              		.loc 1 1525 0 discriminator 1
 1398 006a 0F23     		movs	r3, #15
 1399 006c FB18     		adds	r3, r7, r3
 1400 006e 1B78     		ldrb	r3, [r3]
 1401 0070 DB43     		mvns	r3, r3
 1402 0072 DBB2     		uxtb	r3, r3
 1403 0074 1A00     		movs	r2, r3
 1404 0076 0123     		movs	r3, #1
 1405 0078 1340     		ands	r3, r2
 1406 007a F1D1     		bne	.L101
 1407              	.L102:
1526:Generated_Source\PSoC4/UART.c ****             }
1527:Generated_Source\PSoC4/UART.c **** 
1528:Generated_Source\PSoC4/UART.c ****             if( (retMode == UART_WAIT_FOR_COMPLETE_REINIT) ||
 1408              		.loc 1 1528 0
 1409 007c FB1D     		adds	r3, r7, #7
 1410 007e 1B78     		ldrb	r3, [r3]
 1411 0080 012B     		cmp	r3, #1
 1412 0082 07D0     		beq	.L103
 1413              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1414 0084 FB1D     		adds	r3, r7, #7
 1415 0086 1B78     		ldrb	r3, [r3]
 1416 0088 022B     		cmp	r3, #2
 1417 008a 03D0     		beq	.L103
1529:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_REINIT) ||
 1418              		.loc 1 1529 0 is_stmt 1
 1419 008c FB1D     		adds	r3, r7, #7
 1420 008e 1B78     		ldrb	r3, [r3]
 1421 0090 032B     		cmp	r3, #3
 1422 0092 03D1     		bne	.L104
 1423              	.L103:
1530:Generated_Source\PSoC4/UART.c ****                 (retMode == UART_SEND_WAIT_REINIT) )
1531:Generated_Source\PSoC4/UART.c ****             {
1532:Generated_Source\PSoC4/UART.c **** 
1533:Generated_Source\PSoC4/UART.c ****             #if(UART_TXCLKGEN_DP)
1534:Generated_Source\PSoC4/UART.c ****                 UART_TXBITCLKTX_COMPLETE_REG = txPeriod;
 1424              		.loc 1 1534 0
 1425 0094 044A     		ldr	r2, .L105+4
 1426 0096 054B     		ldr	r3, .L105+8
 1427 0098 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 53


 1428 009a 1370     		strb	r3, [r2]
 1429              	.L104:
 1430              	.LBE2:
1535:Generated_Source\PSoC4/UART.c ****             #else
1536:Generated_Source\PSoC4/UART.c ****                 UART_TXBITCTR_PERIOD_REG = txPeriod;
1537:Generated_Source\PSoC4/UART.c ****             #endif /* End UART_TXCLKGEN_DP */
1538:Generated_Source\PSoC4/UART.c **** 
1539:Generated_Source\PSoC4/UART.c ****             #if( (UART_PARITY_TYPE != UART__B_UART__NONE_REVB) || \
1540:Generated_Source\PSoC4/UART.c ****                  (UART_PARITY_TYPE_SW != 0u) )
1541:Generated_Source\PSoC4/UART.c ****                 UART_WriteControlRegister(UART_ReadControlRegister() &
1542:Generated_Source\PSoC4/UART.c ****                                                       (uint8) ~UART_CTRL_HD_SEND_BREAK);
1543:Generated_Source\PSoC4/UART.c ****             #endif /* End UART_PARITY_TYPE != NONE */
1544:Generated_Source\PSoC4/UART.c ****             }
1545:Generated_Source\PSoC4/UART.c ****         #endif    /* End UART_HD_ENABLED */
1546:Generated_Source\PSoC4/UART.c ****         }
1547:Generated_Source\PSoC4/UART.c ****     }
 1431              		.loc 1 1547 0
 1432 009c C046     		nop
 1433 009e BD46     		mov	sp, r7
 1434 00a0 04B0     		add	sp, sp, #16
 1435              		@ sp needed
 1436 00a2 80BD     		pop	{r7, pc}
 1437              	.L106:
 1438              		.align	2
 1439              	.L105:
 1440 00a4 00000000 		.word	UART_initVar
 1441 00a8 31000F40 		.word	1074724913
 1442 00ac 01000000 		.word	txPeriod.4983
 1443 00b0 40000F40 		.word	1074724928
 1444 00b4 60000F40 		.word	1074724960
 1445              		.cfi_endproc
 1446              	.LFE25:
 1447              		.size	UART_SendBreak, .-UART_SendBreak
 1448              		.section	.text.UART_SetTxAddressMode,"ax",%progbits
 1449              		.align	2
 1450              		.global	UART_SetTxAddressMode
 1451              		.code	16
 1452              		.thumb_func
 1453              		.type	UART_SetTxAddressMode, %function
 1454              	UART_SetTxAddressMode:
 1455              	.LFB26:
1548:Generated_Source\PSoC4/UART.c **** 
1549:Generated_Source\PSoC4/UART.c **** 
1550:Generated_Source\PSoC4/UART.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/UART.c ****     * Function Name: UART_SetTxAddressMode
1552:Generated_Source\PSoC4/UART.c ****     ********************************************************************************
1553:Generated_Source\PSoC4/UART.c ****     *
1554:Generated_Source\PSoC4/UART.c ****     * Summary:
1555:Generated_Source\PSoC4/UART.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:Generated_Source\PSoC4/UART.c ****     *
1557:Generated_Source\PSoC4/UART.c ****     * Parameters:
1558:Generated_Source\PSoC4/UART.c ****     *  addressMode: 
1559:Generated_Source\PSoC4/UART.c ****     *       UART_SET_SPACE - Configure the transmitter to send the next
1560:Generated_Source\PSoC4/UART.c ****     *                                    byte as a data.
1561:Generated_Source\PSoC4/UART.c ****     *       UART_SET_MARK  - Configure the transmitter to send the next
1562:Generated_Source\PSoC4/UART.c ****     *                                    byte as an address.
1563:Generated_Source\PSoC4/UART.c ****     *
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 54


1564:Generated_Source\PSoC4/UART.c ****     * Return:
1565:Generated_Source\PSoC4/UART.c ****     *  None.
1566:Generated_Source\PSoC4/UART.c ****     *
1567:Generated_Source\PSoC4/UART.c ****     * Side Effects:
1568:Generated_Source\PSoC4/UART.c ****     *  This function sets and clears UART_CTRL_MARK bit in the Control
1569:Generated_Source\PSoC4/UART.c ****     *  register.
1570:Generated_Source\PSoC4/UART.c ****     *
1571:Generated_Source\PSoC4/UART.c ****     *******************************************************************************/
1572:Generated_Source\PSoC4/UART.c ****     void UART_SetTxAddressMode(uint8 addressMode) 
1573:Generated_Source\PSoC4/UART.c ****     {
 1456              		.loc 1 1573 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 8
 1459              		@ frame_needed = 1, uses_anonymous_args = 0
 1460 0000 80B5     		push	{r7, lr}
 1461              		.cfi_def_cfa_offset 8
 1462              		.cfi_offset 7, -8
 1463              		.cfi_offset 14, -4
 1464 0002 82B0     		sub	sp, sp, #8
 1465              		.cfi_def_cfa_offset 16
 1466 0004 00AF     		add	r7, sp, #0
 1467              		.cfi_def_cfa_register 7
 1468 0006 0200     		movs	r2, r0
 1469 0008 FB1D     		adds	r3, r7, #7
 1470 000a 1A70     		strb	r2, [r3]
1574:Generated_Source\PSoC4/UART.c ****         /* Mark/Space sending enable */
1575:Generated_Source\PSoC4/UART.c ****         if(addressMode != 0u)
1576:Generated_Source\PSoC4/UART.c ****         {
1577:Generated_Source\PSoC4/UART.c ****         #if( UART_CONTROL_REG_REMOVED == 0u )
1578:Generated_Source\PSoC4/UART.c ****             UART_WriteControlRegister(UART_ReadControlRegister() |
1579:Generated_Source\PSoC4/UART.c ****                                                   UART_CTRL_MARK);
1580:Generated_Source\PSoC4/UART.c ****         #endif /* End UART_CONTROL_REG_REMOVED == 0u */
1581:Generated_Source\PSoC4/UART.c ****         }
1582:Generated_Source\PSoC4/UART.c ****         else
1583:Generated_Source\PSoC4/UART.c ****         {
1584:Generated_Source\PSoC4/UART.c ****         #if( UART_CONTROL_REG_REMOVED == 0u )
1585:Generated_Source\PSoC4/UART.c ****             UART_WriteControlRegister(UART_ReadControlRegister() &
1586:Generated_Source\PSoC4/UART.c ****                                                   (uint8) ~UART_CTRL_MARK);
1587:Generated_Source\PSoC4/UART.c ****         #endif /* End UART_CONTROL_REG_REMOVED == 0u */
1588:Generated_Source\PSoC4/UART.c ****         }
1589:Generated_Source\PSoC4/UART.c ****     }
 1471              		.loc 1 1589 0
 1472 000c C046     		nop
 1473 000e BD46     		mov	sp, r7
 1474 0010 02B0     		add	sp, sp, #8
 1475              		@ sp needed
 1476 0012 80BD     		pop	{r7, pc}
 1477              		.cfi_endproc
 1478              	.LFE26:
 1479              		.size	UART_SetTxAddressMode, .-UART_SetTxAddressMode
 1480              		.bss
 1481              	txPeriod.4983:
 1482 0001 00       		.space	1
 1483              		.text
 1484              	.Letext0:
 1485              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1486              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 55


 1487              	.Ldebug_info0:
 1488 0000 06050000 		.4byte	0x506
 1489 0004 0400     		.2byte	0x4
 1490 0006 00000000 		.4byte	.Ldebug_abbrev0
 1491 000a 04       		.byte	0x4
 1492 000b 01       		.uleb128 0x1
 1493 000c 92010000 		.4byte	.LASF61
 1494 0010 0C       		.byte	0xc
 1495 0011 DA030000 		.4byte	.LASF62
 1496 0015 16030000 		.4byte	.LASF63
 1497 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1498 001d 00000000 		.4byte	0
 1499 0021 00000000 		.4byte	.Ldebug_line0
 1500 0025 02       		.uleb128 0x2
 1501 0026 01       		.byte	0x1
 1502 0027 06       		.byte	0x6
 1503 0028 61000000 		.4byte	.LASF0
 1504 002c 02       		.uleb128 0x2
 1505 002d 01       		.byte	0x1
 1506 002e 08       		.byte	0x8
 1507 002f AA020000 		.4byte	.LASF1
 1508 0033 02       		.uleb128 0x2
 1509 0034 02       		.byte	0x2
 1510 0035 05       		.byte	0x5
 1511 0036 C9020000 		.4byte	.LASF2
 1512 003a 02       		.uleb128 0x2
 1513 003b 02       		.byte	0x2
 1514 003c 07       		.byte	0x7
 1515 003d 47010000 		.4byte	.LASF3
 1516 0041 02       		.uleb128 0x2
 1517 0042 04       		.byte	0x4
 1518 0043 05       		.byte	0x5
 1519 0044 76000000 		.4byte	.LASF4
 1520 0048 02       		.uleb128 0x2
 1521 0049 04       		.byte	0x4
 1522 004a 07       		.byte	0x7
 1523 004b 22010000 		.4byte	.LASF5
 1524 004f 02       		.uleb128 0x2
 1525 0050 08       		.byte	0x8
 1526 0051 05       		.byte	0x5
 1527 0052 53000000 		.4byte	.LASF6
 1528 0056 02       		.uleb128 0x2
 1529 0057 08       		.byte	0x8
 1530 0058 07       		.byte	0x7
 1531 0059 19000000 		.4byte	.LASF7
 1532 005d 03       		.uleb128 0x3
 1533 005e 04       		.byte	0x4
 1534 005f 05       		.byte	0x5
 1535 0060 696E7400 		.ascii	"int\000"
 1536 0064 02       		.uleb128 0x2
 1537 0065 04       		.byte	0x4
 1538 0066 07       		.byte	0x7
 1539 0067 F5000000 		.4byte	.LASF8
 1540 006b 04       		.uleb128 0x4
 1541 006c 9C000000 		.4byte	.LASF9
 1542 0070 02       		.byte	0x2
 1543 0071 E401     		.2byte	0x1e4
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 56


 1544 0073 2C000000 		.4byte	0x2c
 1545 0077 04       		.uleb128 0x4
 1546 0078 00000000 		.4byte	.LASF10
 1547 007c 02       		.byte	0x2
 1548 007d E501     		.2byte	0x1e5
 1549 007f 3A000000 		.4byte	0x3a
 1550 0083 02       		.uleb128 0x2
 1551 0084 04       		.byte	0x4
 1552 0085 04       		.byte	0x4
 1553 0086 74020000 		.4byte	.LASF11
 1554 008a 02       		.uleb128 0x2
 1555 008b 08       		.byte	0x8
 1556 008c 04       		.byte	0x4
 1557 008d BB000000 		.4byte	.LASF12
 1558 0091 04       		.uleb128 0x4
 1559 0092 6B030000 		.4byte	.LASF13
 1560 0096 02       		.byte	0x2
 1561 0097 F501     		.2byte	0x1f5
 1562 0099 9D000000 		.4byte	0x9d
 1563 009d 02       		.uleb128 0x2
 1564 009e 01       		.byte	0x1
 1565 009f 08       		.byte	0x8
 1566 00a0 11030000 		.4byte	.LASF14
 1567 00a4 04       		.uleb128 0x4
 1568 00a5 8F020000 		.4byte	.LASF15
 1569 00a9 02       		.byte	0x2
 1570 00aa 8E02     		.2byte	0x28e
 1571 00ac B0000000 		.4byte	0xb0
 1572 00b0 05       		.uleb128 0x5
 1573 00b1 6B000000 		.4byte	0x6b
 1574 00b5 02       		.uleb128 0x2
 1575 00b6 08       		.byte	0x8
 1576 00b7 04       		.byte	0x4
 1577 00b8 31020000 		.4byte	.LASF16
 1578 00bc 02       		.uleb128 0x2
 1579 00bd 04       		.byte	0x4
 1580 00be 07       		.byte	0x7
 1581 00bf 28020000 		.4byte	.LASF17
 1582 00c3 06       		.uleb128 0x6
 1583 00c4 30000000 		.4byte	.LASF18
 1584 00c8 01       		.byte	0x1
 1585 00c9 4C       		.byte	0x4c
 1586 00ca 00000000 		.4byte	.LFB0
 1587 00ce 24000000 		.4byte	.LFE0-.LFB0
 1588 00d2 01       		.uleb128 0x1
 1589 00d3 9C       		.byte	0x9c
 1590 00d4 07       		.uleb128 0x7
 1591 00d5 D6000000 		.4byte	.LASF19
 1592 00d9 01       		.byte	0x1
 1593 00da 6A       		.byte	0x6a
 1594 00db 00000000 		.4byte	.LFB1
 1595 00df 3C000000 		.4byte	.LFE1-.LFB1
 1596 00e3 01       		.uleb128 0x1
 1597 00e4 9C       		.byte	0x9c
 1598 00e5 08       		.uleb128 0x8
 1599 00e6 F3020000 		.4byte	.LASF20
 1600 00ea 01       		.byte	0x1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 57


 1601 00eb B7       		.byte	0xb7
 1602 00ec 00000000 		.4byte	.LFB2
 1603 00f0 64000000 		.4byte	.LFE2-.LFB2
 1604 00f4 01       		.uleb128 0x1
 1605 00f5 9C       		.byte	0x9c
 1606 00f6 09010000 		.4byte	0x109
 1607 00fa 09       		.uleb128 0x9
 1608 00fb 96030000 		.4byte	.LASF22
 1609 00ff 01       		.byte	0x1
 1610 0100 B9       		.byte	0xb9
 1611 0101 6B000000 		.4byte	0x6b
 1612 0105 02       		.uleb128 0x2
 1613 0106 91       		.byte	0x91
 1614 0107 6F       		.sleb128 -17
 1615 0108 00       		.byte	0
 1616 0109 08       		.uleb128 0x8
 1617 010a D0030000 		.4byte	.LASF21
 1618 010e 01       		.byte	0x1
 1619 010f F0       		.byte	0xf0
 1620 0110 00000000 		.4byte	.LFB3
 1621 0114 64000000 		.4byte	.LFE3-.LFB3
 1622 0118 01       		.uleb128 0x1
 1623 0119 9C       		.byte	0x9c
 1624 011a 2D010000 		.4byte	0x12d
 1625 011e 09       		.uleb128 0x9
 1626 011f 96030000 		.4byte	.LASF22
 1627 0123 01       		.byte	0x1
 1628 0124 F2       		.byte	0xf2
 1629 0125 6B000000 		.4byte	0x6b
 1630 0129 02       		.uleb128 0x2
 1631 012a 91       		.byte	0x91
 1632 012b 6F       		.sleb128 -17
 1633 012c 00       		.byte	0
 1634 012d 0A       		.uleb128 0xa
 1635 012e A2000000 		.4byte	.LASF33
 1636 0132 01       		.byte	0x1
 1637 0133 2701     		.2byte	0x127
 1638 0135 6B000000 		.4byte	0x6b
 1639 0139 00000000 		.4byte	.LFB4
 1640 013d 0C000000 		.4byte	.LFE4-.LFB4
 1641 0141 01       		.uleb128 0x1
 1642 0142 9C       		.byte	0x9c
 1643 0143 0B       		.uleb128 0xb
 1644 0144 07040000 		.4byte	.LASF23
 1645 0148 01       		.byte	0x1
 1646 0149 3F01     		.2byte	0x13f
 1647 014b 00000000 		.4byte	.LFB5
 1648 014f 14000000 		.4byte	.LFE5-.LFB5
 1649 0153 01       		.uleb128 0x1
 1650 0154 9C       		.byte	0x9c
 1651 0155 69010000 		.4byte	0x169
 1652 0159 0C       		.uleb128 0xc
 1653 015a CE000000 		.4byte	.LASF25
 1654 015e 01       		.byte	0x1
 1655 015f 3F01     		.2byte	0x13f
 1656 0161 6B000000 		.4byte	0x6b
 1657 0165 02       		.uleb128 0x2
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 58


 1658 0166 91       		.byte	0x91
 1659 0167 77       		.sleb128 -9
 1660 0168 00       		.byte	0
 1661 0169 0B       		.uleb128 0xb
 1662 016a 71030000 		.4byte	.LASF24
 1663 016e 01       		.byte	0x1
 1664 016f 6701     		.2byte	0x167
 1665 0171 00000000 		.4byte	.LFB6
 1666 0175 20000000 		.4byte	.LFE6-.LFB6
 1667 0179 01       		.uleb128 0x1
 1668 017a 9C       		.byte	0x9c
 1669 017b 8F010000 		.4byte	0x18f
 1670 017f 0C       		.uleb128 0xc
 1671 0180 63010000 		.4byte	.LASF26
 1672 0184 01       		.byte	0x1
 1673 0185 6701     		.2byte	0x167
 1674 0187 6B000000 		.4byte	0x6b
 1675 018b 02       		.uleb128 0x2
 1676 018c 91       		.byte	0x91
 1677 018d 77       		.sleb128 -9
 1678 018e 00       		.byte	0
 1679 018f 0D       		.uleb128 0xd
 1680 0190 8C000000 		.4byte	.LASF28
 1681 0194 01       		.byte	0x1
 1682 0195 8801     		.2byte	0x188
 1683 0197 6B000000 		.4byte	0x6b
 1684 019b 00000000 		.4byte	.LFB7
 1685 019f 20000000 		.4byte	.LFE7-.LFB7
 1686 01a3 01       		.uleb128 0x1
 1687 01a4 9C       		.byte	0x9c
 1688 01a5 B9010000 		.4byte	0x1b9
 1689 01a9 0E       		.uleb128 0xe
 1690 01aa EC020000 		.4byte	.LASF27
 1691 01ae 01       		.byte	0x1
 1692 01af 8A01     		.2byte	0x18a
 1693 01b1 6B000000 		.4byte	0x6b
 1694 01b5 02       		.uleb128 0x2
 1695 01b6 91       		.byte	0x91
 1696 01b7 77       		.sleb128 -9
 1697 01b8 00       		.byte	0
 1698 01b9 0D       		.uleb128 0xd
 1699 01ba FF020000 		.4byte	.LASF29
 1700 01be 01       		.byte	0x1
 1701 01bf E501     		.2byte	0x1e5
 1702 01c1 6B000000 		.4byte	0x6b
 1703 01c5 00000000 		.4byte	.LFB8
 1704 01c9 24000000 		.4byte	.LFE8-.LFB8
 1705 01cd 01       		.uleb128 0x1
 1706 01ce 9C       		.byte	0x9c
 1707 01cf E3010000 		.4byte	0x1e3
 1708 01d3 0E       		.uleb128 0xe
 1709 01d4 C9030000 		.4byte	.LASF30
 1710 01d8 01       		.byte	0x1
 1711 01d9 E701     		.2byte	0x1e7
 1712 01db 6B000000 		.4byte	0x6b
 1713 01df 02       		.uleb128 0x2
 1714 01e0 91       		.byte	0x91
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 59


 1715 01e1 77       		.sleb128 -9
 1716 01e2 00       		.byte	0
 1717 01e3 0D       		.uleb128 0xd
 1718 01e4 89030000 		.4byte	.LASF31
 1719 01e8 01       		.byte	0x1
 1720 01e9 1402     		.2byte	0x214
 1721 01eb 6B000000 		.4byte	0x6b
 1722 01ef 00000000 		.4byte	.LFB9
 1723 01f3 4C000000 		.4byte	.LFE9-.LFB9
 1724 01f7 01       		.uleb128 0x1
 1725 01f8 9C       		.byte	0x9c
 1726 01f9 1C020000 		.4byte	0x21c
 1727 01fd 0E       		.uleb128 0xe
 1728 01fe EC020000 		.4byte	.LASF27
 1729 0202 01       		.byte	0x1
 1730 0203 1602     		.2byte	0x216
 1731 0205 6B000000 		.4byte	0x6b
 1732 0209 02       		.uleb128 0x2
 1733 020a 91       		.byte	0x91
 1734 020b 77       		.sleb128 -9
 1735 020c 0E       		.uleb128 0xe
 1736 020d 6B020000 		.4byte	.LASF32
 1737 0211 01       		.byte	0x1
 1738 0212 1702     		.2byte	0x217
 1739 0214 6B000000 		.4byte	0x6b
 1740 0218 02       		.uleb128 0x2
 1741 0219 91       		.byte	0x91
 1742 021a 76       		.sleb128 -10
 1743 021b 00       		.byte	0
 1744 021c 0F       		.uleb128 0xf
 1745 021d E8000000 		.4byte	.LASF34
 1746 0221 01       		.byte	0x1
 1747 0222 7A02     		.2byte	0x27a
 1748 0224 77000000 		.4byte	0x77
 1749 0228 00000000 		.4byte	.LFB10
 1750 022c 22000000 		.4byte	.LFE10-.LFB10
 1751 0230 01       		.uleb128 0x1
 1752 0231 9C       		.byte	0x9c
 1753 0232 0D       		.uleb128 0xd
 1754 0233 B4030000 		.4byte	.LASF35
 1755 0237 01       		.byte	0x1
 1756 0238 AB02     		.2byte	0x2ab
 1757 023a 6B000000 		.4byte	0x6b
 1758 023e 00000000 		.4byte	.LFB11
 1759 0242 30000000 		.4byte	.LFE11-.LFB11
 1760 0246 01       		.uleb128 0x1
 1761 0247 9C       		.byte	0x9c
 1762 0248 5C020000 		.4byte	0x25c
 1763 024c 0E       		.uleb128 0xe
 1764 024d 42010000 		.4byte	.LASF36
 1765 0251 01       		.byte	0x1
 1766 0252 AE02     		.2byte	0x2ae
 1767 0254 6B000000 		.4byte	0x6b
 1768 0258 02       		.uleb128 0x2
 1769 0259 91       		.byte	0x91
 1770 025a 77       		.sleb128 -9
 1771 025b 00       		.byte	0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 60


 1772 025c 10       		.uleb128 0x10
 1773 025d 21040000 		.4byte	.LASF37
 1774 0261 01       		.byte	0x1
 1775 0262 F502     		.2byte	0x2f5
 1776 0264 00000000 		.4byte	.LFB12
 1777 0268 48000000 		.4byte	.LFE12-.LFB12
 1778 026c 01       		.uleb128 0x1
 1779 026d 9C       		.byte	0x9c
 1780 026e 82020000 		.4byte	0x282
 1781 0272 0E       		.uleb128 0xe
 1782 0273 96030000 		.4byte	.LASF22
 1783 0277 01       		.byte	0x1
 1784 0278 F702     		.2byte	0x2f7
 1785 027a 6B000000 		.4byte	0x6b
 1786 027e 02       		.uleb128 0x2
 1787 027f 91       		.byte	0x91
 1788 0280 6F       		.sleb128 -17
 1789 0281 00       		.byte	0
 1790 0282 0B       		.uleb128 0xb
 1791 0283 94020000 		.4byte	.LASF38
 1792 0287 01       		.byte	0x1
 1793 0288 2D03     		.2byte	0x32d
 1794 028a 00000000 		.4byte	.LFB13
 1795 028e 14000000 		.4byte	.LFE13-.LFB13
 1796 0292 01       		.uleb128 0x1
 1797 0293 9C       		.byte	0x9c
 1798 0294 A8020000 		.4byte	0x2a8
 1799 0298 0C       		.uleb128 0xc
 1800 0299 C2000000 		.4byte	.LASF39
 1801 029d 01       		.byte	0x1
 1802 029e 2D03     		.2byte	0x32d
 1803 02a0 6B000000 		.4byte	0x6b
 1804 02a4 02       		.uleb128 0x2
 1805 02a5 91       		.byte	0x91
 1806 02a6 77       		.sleb128 -9
 1807 02a7 00       		.byte	0
 1808 02a8 0B       		.uleb128 0xb
 1809 02a9 45020000 		.4byte	.LASF40
 1810 02ad 01       		.byte	0x1
 1811 02ae 5903     		.2byte	0x359
 1812 02b0 00000000 		.4byte	.LFB14
 1813 02b4 20000000 		.4byte	.LFE14-.LFB14
 1814 02b8 01       		.uleb128 0x1
 1815 02b9 9C       		.byte	0x9c
 1816 02ba CE020000 		.4byte	0x2ce
 1817 02be 0C       		.uleb128 0xc
 1818 02bf 3D020000 		.4byte	.LASF41
 1819 02c3 01       		.byte	0x1
 1820 02c4 5903     		.2byte	0x359
 1821 02c6 6B000000 		.4byte	0x6b
 1822 02ca 02       		.uleb128 0x2
 1823 02cb 91       		.byte	0x91
 1824 02cc 77       		.sleb128 -9
 1825 02cd 00       		.byte	0
 1826 02ce 0B       		.uleb128 0xb
 1827 02cf 58020000 		.4byte	.LASF42
 1828 02d3 01       		.byte	0x1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 61


 1829 02d4 6D03     		.2byte	0x36d
 1830 02d6 00000000 		.4byte	.LFB15
 1831 02da 20000000 		.4byte	.LFE15-.LFB15
 1832 02de 01       		.uleb128 0x1
 1833 02df 9C       		.byte	0x9c
 1834 02e0 F4020000 		.4byte	0x2f4
 1835 02e4 0C       		.uleb128 0xc
 1836 02e5 3D020000 		.4byte	.LASF41
 1837 02e9 01       		.byte	0x1
 1838 02ea 6D03     		.2byte	0x36d
 1839 02ec 6B000000 		.4byte	0x6b
 1840 02f0 02       		.uleb128 0x2
 1841 02f1 91       		.byte	0x91
 1842 02f2 77       		.sleb128 -9
 1843 02f3 00       		.byte	0
 1844 02f4 0B       		.uleb128 0xb
 1845 02f5 3B000000 		.4byte	.LASF43
 1846 02f9 01       		.byte	0x1
 1847 02fa 8C03     		.2byte	0x38c
 1848 02fc 00000000 		.4byte	.LFB16
 1849 0300 20000000 		.4byte	.LFE16-.LFB16
 1850 0304 01       		.uleb128 0x1
 1851 0305 9C       		.byte	0x9c
 1852 0306 1A030000 		.4byte	0x31a
 1853 030a 0C       		.uleb128 0xc
 1854 030b 63010000 		.4byte	.LASF26
 1855 030f 01       		.byte	0x1
 1856 0310 8C03     		.2byte	0x38c
 1857 0312 6B000000 		.4byte	0x6b
 1858 0316 02       		.uleb128 0x2
 1859 0317 91       		.byte	0x91
 1860 0318 77       		.sleb128 -9
 1861 0319 00       		.byte	0
 1862 031a 0B       		.uleb128 0xb
 1863 031b B8020000 		.4byte	.LASF44
 1864 031f 01       		.byte	0x1
 1865 0320 AE03     		.2byte	0x3ae
 1866 0322 00000000 		.4byte	.LFB17
 1867 0326 2C000000 		.4byte	.LFE17-.LFB17
 1868 032a 01       		.uleb128 0x1
 1869 032b 9C       		.byte	0x9c
 1870 032c 40030000 		.4byte	0x340
 1871 0330 0C       		.uleb128 0xc
 1872 0331 07000000 		.4byte	.LASF45
 1873 0335 01       		.byte	0x1
 1874 0336 AE03     		.2byte	0x3ae
 1875 0338 6B000000 		.4byte	0x6b
 1876 033c 02       		.uleb128 0x2
 1877 033d 91       		.byte	0x91
 1878 033e 77       		.sleb128 -9
 1879 033f 00       		.byte	0
 1880 0340 0A       		.uleb128 0xa
 1881 0341 80010000 		.4byte	.LASF46
 1882 0345 01       		.byte	0x1
 1883 0346 EB03     		.2byte	0x3eb
 1884 0348 6B000000 		.4byte	0x6b
 1885 034c 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 62


 1886 0350 14000000 		.4byte	.LFE18-.LFB18
 1887 0354 01       		.uleb128 0x1
 1888 0355 9C       		.byte	0x9c
 1889 0356 0B       		.uleb128 0xb
 1890 0357 7F000000 		.4byte	.LASF47
 1891 035b 01       		.byte	0x1
 1892 035c 1104     		.2byte	0x411
 1893 035e 00000000 		.4byte	.LFB19
 1894 0362 34000000 		.4byte	.LFE19-.LFB19
 1895 0366 01       		.uleb128 0x1
 1896 0367 9C       		.byte	0x9c
 1897 0368 7C030000 		.4byte	0x37c
 1898 036c 0C       		.uleb128 0xc
 1899 036d 07000000 		.4byte	.LASF45
 1900 0371 01       		.byte	0x1
 1901 0372 1104     		.2byte	0x411
 1902 0374 6B000000 		.4byte	0x6b
 1903 0378 02       		.uleb128 0x2
 1904 0379 91       		.byte	0x91
 1905 037a 77       		.sleb128 -9
 1906 037b 00       		.byte	0
 1907 037c 10       		.uleb128 0x10
 1908 037d F8030000 		.4byte	.LASF48
 1909 0381 01       		.byte	0x1
 1910 0382 7904     		.2byte	0x479
 1911 0384 00000000 		.4byte	.LFB20
 1912 0388 58000000 		.4byte	.LFE20-.LFB20
 1913 038c 01       		.uleb128 0x1
 1914 038d 9C       		.byte	0x9c
 1915 038e B1030000 		.4byte	0x3b1
 1916 0392 0C       		.uleb128 0xc
 1917 0393 12000000 		.4byte	.LASF49
 1918 0397 01       		.byte	0x1
 1919 0398 7904     		.2byte	0x479
 1920 039a B1030000 		.4byte	0x3b1
 1921 039e 02       		.uleb128 0x2
 1922 039f 91       		.byte	0x91
 1923 03a0 6C       		.sleb128 -20
 1924 03a1 0E       		.uleb128 0xe
 1925 03a2 5A010000 		.4byte	.LASF50
 1926 03a6 01       		.byte	0x1
 1927 03a7 7B04     		.2byte	0x47b
 1928 03a9 77000000 		.4byte	0x77
 1929 03ad 02       		.uleb128 0x2
 1930 03ae 91       		.byte	0x91
 1931 03af 76       		.sleb128 -10
 1932 03b0 00       		.byte	0
 1933 03b1 11       		.uleb128 0x11
 1934 03b2 04       		.byte	0x4
 1935 03b3 B7030000 		.4byte	0x3b7
 1936 03b7 12       		.uleb128 0x12
 1937 03b8 91000000 		.4byte	0x91
 1938 03bc 10       		.uleb128 0x10
 1939 03bd 34010000 		.4byte	.LASF51
 1940 03c1 01       		.byte	0x1
 1941 03c2 A704     		.2byte	0x4a7
 1942 03c4 00000000 		.4byte	.LFB21
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 63


 1943 03c8 5C000000 		.4byte	.LFE21-.LFB21
 1944 03cc 01       		.uleb128 0x1
 1945 03cd 9C       		.byte	0x9c
 1946 03ce 00040000 		.4byte	0x400
 1947 03d2 0C       		.uleb128 0xc
 1948 03d3 12000000 		.4byte	.LASF49
 1949 03d7 01       		.byte	0x1
 1950 03d8 A704     		.2byte	0x4a7
 1951 03da 00040000 		.4byte	0x400
 1952 03de 02       		.uleb128 0x2
 1953 03df 91       		.byte	0x91
 1954 03e0 6C       		.sleb128 -20
 1955 03e1 0C       		.uleb128 0xc
 1956 03e2 E2020000 		.4byte	.LASF52
 1957 03e6 01       		.byte	0x1
 1958 03e7 A704     		.2byte	0x4a7
 1959 03e9 6B000000 		.4byte	0x6b
 1960 03ed 02       		.uleb128 0x2
 1961 03ee 91       		.byte	0x91
 1962 03ef 6B       		.sleb128 -21
 1963 03f0 0E       		.uleb128 0xe
 1964 03f1 5A010000 		.4byte	.LASF50
 1965 03f5 01       		.byte	0x1
 1966 03f6 AA04     		.2byte	0x4aa
 1967 03f8 6B000000 		.4byte	0x6b
 1968 03fc 02       		.uleb128 0x2
 1969 03fd 91       		.byte	0x91
 1970 03fe 77       		.sleb128 -9
 1971 03ff 00       		.byte	0
 1972 0400 11       		.uleb128 0x11
 1973 0401 04       		.byte	0x4
 1974 0402 06040000 		.4byte	0x406
 1975 0406 12       		.uleb128 0x12
 1976 0407 6B000000 		.4byte	0x6b
 1977 040b 10       		.uleb128 0x10
 1978 040c 15010000 		.4byte	.LASF53
 1979 0410 01       		.byte	0x1
 1980 0411 CE04     		.2byte	0x4ce
 1981 0413 00000000 		.4byte	.LFB22
 1982 0417 38000000 		.4byte	.LFE22-.LFB22
 1983 041b 01       		.uleb128 0x1
 1984 041c 9C       		.byte	0x9c
 1985 041d 31040000 		.4byte	0x431
 1986 0421 0C       		.uleb128 0xc
 1987 0422 07000000 		.4byte	.LASF45
 1988 0426 01       		.byte	0x1
 1989 0427 CE04     		.2byte	0x4ce
 1990 0429 6B000000 		.4byte	0x6b
 1991 042d 02       		.uleb128 0x2
 1992 042e 91       		.byte	0x91
 1993 042f 77       		.sleb128 -9
 1994 0430 00       		.byte	0
 1995 0431 0D       		.uleb128 0xd
 1996 0432 7A020000 		.4byte	.LASF54
 1997 0436 01       		.byte	0x1
 1998 0437 F904     		.2byte	0x4f9
 1999 0439 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 64


 2000 043d 00000000 		.4byte	.LFB23
 2001 0441 48000000 		.4byte	.LFE23-.LFB23
 2002 0445 01       		.uleb128 0x1
 2003 0446 9C       		.byte	0x9c
 2004 0447 5B040000 		.4byte	0x45b
 2005 044b 0E       		.uleb128 0xe
 2006 044c 42010000 		.4byte	.LASF36
 2007 0450 01       		.byte	0x1
 2008 0451 FC04     		.2byte	0x4fc
 2009 0453 6B000000 		.4byte	0x6b
 2010 0457 02       		.uleb128 0x2
 2011 0458 91       		.byte	0x91
 2012 0459 77       		.sleb128 -9
 2013 045a 00       		.byte	0
 2014 045b 10       		.uleb128 0x10
 2015 045c 02010000 		.4byte	.LASF55
 2016 0460 01       		.byte	0x1
 2017 0461 4A05     		.2byte	0x54a
 2018 0463 00000000 		.4byte	.LFB24
 2019 0467 48000000 		.4byte	.LFE24-.LFB24
 2020 046b 01       		.uleb128 0x1
 2021 046c 9C       		.byte	0x9c
 2022 046d 81040000 		.4byte	0x481
 2023 0471 0E       		.uleb128 0xe
 2024 0472 96030000 		.4byte	.LASF22
 2025 0476 01       		.byte	0x1
 2026 0477 4C05     		.2byte	0x54c
 2027 0479 6B000000 		.4byte	0x6b
 2028 047d 02       		.uleb128 0x2
 2029 047e 91       		.byte	0x91
 2030 047f 6F       		.sleb128 -17
 2031 0480 00       		.byte	0
 2032 0481 0B       		.uleb128 0xb
 2033 0482 D3020000 		.4byte	.LASF56
 2034 0486 01       		.byte	0x1
 2035 0487 A005     		.2byte	0x5a0
 2036 0489 00000000 		.4byte	.LFB25
 2037 048d B8000000 		.4byte	.LFE25-.LFB25
 2038 0491 01       		.uleb128 0x1
 2039 0492 9C       		.byte	0x9c
 2040 0493 D2040000 		.4byte	0x4d2
 2041 0497 0C       		.uleb128 0xc
 2042 0498 E0000000 		.4byte	.LASF57
 2043 049c 01       		.byte	0x1
 2044 049d A005     		.2byte	0x5a0
 2045 049f 6B000000 		.4byte	0x6b
 2046 04a3 02       		.uleb128 0x2
 2047 04a4 91       		.byte	0x91
 2048 04a5 6F       		.sleb128 -17
 2049 04a6 13       		.uleb128 0x13
 2050 04a7 14000000 		.4byte	.LBB2
 2051 04ab 88000000 		.4byte	.LBE2-.LBB2
 2052 04af 0E       		.uleb128 0xe
 2053 04b0 20020000 		.4byte	.LASF58
 2054 04b4 01       		.byte	0x1
 2055 04b5 A805     		.2byte	0x5a8
 2056 04b7 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 65


 2057 04bb 02       		.uleb128 0x2
 2058 04bc 91       		.byte	0x91
 2059 04bd 77       		.sleb128 -9
 2060 04be 0E       		.uleb128 0xe
 2061 04bf 6D000000 		.4byte	.LASF59
 2062 04c3 01       		.byte	0x1
 2063 04c4 D005     		.2byte	0x5d0
 2064 04c6 6B000000 		.4byte	0x6b
 2065 04ca 05       		.uleb128 0x5
 2066 04cb 03       		.byte	0x3
 2067 04cc 01000000 		.4byte	txPeriod.4983
 2068 04d0 00       		.byte	0
 2069 04d1 00       		.byte	0
 2070 04d2 0B       		.uleb128 0xb
 2071 04d3 6A010000 		.4byte	.LASF60
 2072 04d7 01       		.byte	0x1
 2073 04d8 2406     		.2byte	0x624
 2074 04da 00000000 		.4byte	.LFB26
 2075 04de 14000000 		.4byte	.LFE26-.LFB26
 2076 04e2 01       		.uleb128 0x1
 2077 04e3 9C       		.byte	0x9c
 2078 04e4 F8040000 		.4byte	0x4f8
 2079 04e8 0C       		.uleb128 0xc
 2080 04e9 C2000000 		.4byte	.LASF39
 2081 04ed 01       		.byte	0x1
 2082 04ee 2406     		.2byte	0x624
 2083 04f0 6B000000 		.4byte	0x6b
 2084 04f4 02       		.uleb128 0x2
 2085 04f5 91       		.byte	0x91
 2086 04f6 77       		.sleb128 -9
 2087 04f7 00       		.byte	0
 2088 04f8 14       		.uleb128 0x14
 2089 04f9 A7030000 		.4byte	.LASF64
 2090 04fd 01       		.byte	0x1
 2091 04fe 1B       		.byte	0x1b
 2092 04ff 6B000000 		.4byte	0x6b
 2093 0503 05       		.uleb128 0x5
 2094 0504 03       		.byte	0x3
 2095 0505 00000000 		.4byte	UART_initVar
 2096 0509 00       		.byte	0
 2097              		.section	.debug_abbrev,"",%progbits
 2098              	.Ldebug_abbrev0:
 2099 0000 01       		.uleb128 0x1
 2100 0001 11       		.uleb128 0x11
 2101 0002 01       		.byte	0x1
 2102 0003 25       		.uleb128 0x25
 2103 0004 0E       		.uleb128 0xe
 2104 0005 13       		.uleb128 0x13
 2105 0006 0B       		.uleb128 0xb
 2106 0007 03       		.uleb128 0x3
 2107 0008 0E       		.uleb128 0xe
 2108 0009 1B       		.uleb128 0x1b
 2109 000a 0E       		.uleb128 0xe
 2110 000b 55       		.uleb128 0x55
 2111 000c 17       		.uleb128 0x17
 2112 000d 11       		.uleb128 0x11
 2113 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 66


 2114 000f 10       		.uleb128 0x10
 2115 0010 17       		.uleb128 0x17
 2116 0011 00       		.byte	0
 2117 0012 00       		.byte	0
 2118 0013 02       		.uleb128 0x2
 2119 0014 24       		.uleb128 0x24
 2120 0015 00       		.byte	0
 2121 0016 0B       		.uleb128 0xb
 2122 0017 0B       		.uleb128 0xb
 2123 0018 3E       		.uleb128 0x3e
 2124 0019 0B       		.uleb128 0xb
 2125 001a 03       		.uleb128 0x3
 2126 001b 0E       		.uleb128 0xe
 2127 001c 00       		.byte	0
 2128 001d 00       		.byte	0
 2129 001e 03       		.uleb128 0x3
 2130 001f 24       		.uleb128 0x24
 2131 0020 00       		.byte	0
 2132 0021 0B       		.uleb128 0xb
 2133 0022 0B       		.uleb128 0xb
 2134 0023 3E       		.uleb128 0x3e
 2135 0024 0B       		.uleb128 0xb
 2136 0025 03       		.uleb128 0x3
 2137 0026 08       		.uleb128 0x8
 2138 0027 00       		.byte	0
 2139 0028 00       		.byte	0
 2140 0029 04       		.uleb128 0x4
 2141 002a 16       		.uleb128 0x16
 2142 002b 00       		.byte	0
 2143 002c 03       		.uleb128 0x3
 2144 002d 0E       		.uleb128 0xe
 2145 002e 3A       		.uleb128 0x3a
 2146 002f 0B       		.uleb128 0xb
 2147 0030 3B       		.uleb128 0x3b
 2148 0031 05       		.uleb128 0x5
 2149 0032 49       		.uleb128 0x49
 2150 0033 13       		.uleb128 0x13
 2151 0034 00       		.byte	0
 2152 0035 00       		.byte	0
 2153 0036 05       		.uleb128 0x5
 2154 0037 35       		.uleb128 0x35
 2155 0038 00       		.byte	0
 2156 0039 49       		.uleb128 0x49
 2157 003a 13       		.uleb128 0x13
 2158 003b 00       		.byte	0
 2159 003c 00       		.byte	0
 2160 003d 06       		.uleb128 0x6
 2161 003e 2E       		.uleb128 0x2e
 2162 003f 00       		.byte	0
 2163 0040 3F       		.uleb128 0x3f
 2164 0041 19       		.uleb128 0x19
 2165 0042 03       		.uleb128 0x3
 2166 0043 0E       		.uleb128 0xe
 2167 0044 3A       		.uleb128 0x3a
 2168 0045 0B       		.uleb128 0xb
 2169 0046 3B       		.uleb128 0x3b
 2170 0047 0B       		.uleb128 0xb
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 67


 2171 0048 27       		.uleb128 0x27
 2172 0049 19       		.uleb128 0x19
 2173 004a 11       		.uleb128 0x11
 2174 004b 01       		.uleb128 0x1
 2175 004c 12       		.uleb128 0x12
 2176 004d 06       		.uleb128 0x6
 2177 004e 40       		.uleb128 0x40
 2178 004f 18       		.uleb128 0x18
 2179 0050 9642     		.uleb128 0x2116
 2180 0052 19       		.uleb128 0x19
 2181 0053 00       		.byte	0
 2182 0054 00       		.byte	0
 2183 0055 07       		.uleb128 0x7
 2184 0056 2E       		.uleb128 0x2e
 2185 0057 00       		.byte	0
 2186 0058 3F       		.uleb128 0x3f
 2187 0059 19       		.uleb128 0x19
 2188 005a 03       		.uleb128 0x3
 2189 005b 0E       		.uleb128 0xe
 2190 005c 3A       		.uleb128 0x3a
 2191 005d 0B       		.uleb128 0xb
 2192 005e 3B       		.uleb128 0x3b
 2193 005f 0B       		.uleb128 0xb
 2194 0060 27       		.uleb128 0x27
 2195 0061 19       		.uleb128 0x19
 2196 0062 11       		.uleb128 0x11
 2197 0063 01       		.uleb128 0x1
 2198 0064 12       		.uleb128 0x12
 2199 0065 06       		.uleb128 0x6
 2200 0066 40       		.uleb128 0x40
 2201 0067 18       		.uleb128 0x18
 2202 0068 9742     		.uleb128 0x2117
 2203 006a 19       		.uleb128 0x19
 2204 006b 00       		.byte	0
 2205 006c 00       		.byte	0
 2206 006d 08       		.uleb128 0x8
 2207 006e 2E       		.uleb128 0x2e
 2208 006f 01       		.byte	0x1
 2209 0070 3F       		.uleb128 0x3f
 2210 0071 19       		.uleb128 0x19
 2211 0072 03       		.uleb128 0x3
 2212 0073 0E       		.uleb128 0xe
 2213 0074 3A       		.uleb128 0x3a
 2214 0075 0B       		.uleb128 0xb
 2215 0076 3B       		.uleb128 0x3b
 2216 0077 0B       		.uleb128 0xb
 2217 0078 27       		.uleb128 0x27
 2218 0079 19       		.uleb128 0x19
 2219 007a 11       		.uleb128 0x11
 2220 007b 01       		.uleb128 0x1
 2221 007c 12       		.uleb128 0x12
 2222 007d 06       		.uleb128 0x6
 2223 007e 40       		.uleb128 0x40
 2224 007f 18       		.uleb128 0x18
 2225 0080 9642     		.uleb128 0x2116
 2226 0082 19       		.uleb128 0x19
 2227 0083 01       		.uleb128 0x1
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 68


 2228 0084 13       		.uleb128 0x13
 2229 0085 00       		.byte	0
 2230 0086 00       		.byte	0
 2231 0087 09       		.uleb128 0x9
 2232 0088 34       		.uleb128 0x34
 2233 0089 00       		.byte	0
 2234 008a 03       		.uleb128 0x3
 2235 008b 0E       		.uleb128 0xe
 2236 008c 3A       		.uleb128 0x3a
 2237 008d 0B       		.uleb128 0xb
 2238 008e 3B       		.uleb128 0x3b
 2239 008f 0B       		.uleb128 0xb
 2240 0090 49       		.uleb128 0x49
 2241 0091 13       		.uleb128 0x13
 2242 0092 02       		.uleb128 0x2
 2243 0093 18       		.uleb128 0x18
 2244 0094 00       		.byte	0
 2245 0095 00       		.byte	0
 2246 0096 0A       		.uleb128 0xa
 2247 0097 2E       		.uleb128 0x2e
 2248 0098 00       		.byte	0
 2249 0099 3F       		.uleb128 0x3f
 2250 009a 19       		.uleb128 0x19
 2251 009b 03       		.uleb128 0x3
 2252 009c 0E       		.uleb128 0xe
 2253 009d 3A       		.uleb128 0x3a
 2254 009e 0B       		.uleb128 0xb
 2255 009f 3B       		.uleb128 0x3b
 2256 00a0 05       		.uleb128 0x5
 2257 00a1 27       		.uleb128 0x27
 2258 00a2 19       		.uleb128 0x19
 2259 00a3 49       		.uleb128 0x49
 2260 00a4 13       		.uleb128 0x13
 2261 00a5 11       		.uleb128 0x11
 2262 00a6 01       		.uleb128 0x1
 2263 00a7 12       		.uleb128 0x12
 2264 00a8 06       		.uleb128 0x6
 2265 00a9 40       		.uleb128 0x40
 2266 00aa 18       		.uleb128 0x18
 2267 00ab 9742     		.uleb128 0x2117
 2268 00ad 19       		.uleb128 0x19
 2269 00ae 00       		.byte	0
 2270 00af 00       		.byte	0
 2271 00b0 0B       		.uleb128 0xb
 2272 00b1 2E       		.uleb128 0x2e
 2273 00b2 01       		.byte	0x1
 2274 00b3 3F       		.uleb128 0x3f
 2275 00b4 19       		.uleb128 0x19
 2276 00b5 03       		.uleb128 0x3
 2277 00b6 0E       		.uleb128 0xe
 2278 00b7 3A       		.uleb128 0x3a
 2279 00b8 0B       		.uleb128 0xb
 2280 00b9 3B       		.uleb128 0x3b
 2281 00ba 05       		.uleb128 0x5
 2282 00bb 27       		.uleb128 0x27
 2283 00bc 19       		.uleb128 0x19
 2284 00bd 11       		.uleb128 0x11
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 69


 2285 00be 01       		.uleb128 0x1
 2286 00bf 12       		.uleb128 0x12
 2287 00c0 06       		.uleb128 0x6
 2288 00c1 40       		.uleb128 0x40
 2289 00c2 18       		.uleb128 0x18
 2290 00c3 9742     		.uleb128 0x2117
 2291 00c5 19       		.uleb128 0x19
 2292 00c6 01       		.uleb128 0x1
 2293 00c7 13       		.uleb128 0x13
 2294 00c8 00       		.byte	0
 2295 00c9 00       		.byte	0
 2296 00ca 0C       		.uleb128 0xc
 2297 00cb 05       		.uleb128 0x5
 2298 00cc 00       		.byte	0
 2299 00cd 03       		.uleb128 0x3
 2300 00ce 0E       		.uleb128 0xe
 2301 00cf 3A       		.uleb128 0x3a
 2302 00d0 0B       		.uleb128 0xb
 2303 00d1 3B       		.uleb128 0x3b
 2304 00d2 05       		.uleb128 0x5
 2305 00d3 49       		.uleb128 0x49
 2306 00d4 13       		.uleb128 0x13
 2307 00d5 02       		.uleb128 0x2
 2308 00d6 18       		.uleb128 0x18
 2309 00d7 00       		.byte	0
 2310 00d8 00       		.byte	0
 2311 00d9 0D       		.uleb128 0xd
 2312 00da 2E       		.uleb128 0x2e
 2313 00db 01       		.byte	0x1
 2314 00dc 3F       		.uleb128 0x3f
 2315 00dd 19       		.uleb128 0x19
 2316 00de 03       		.uleb128 0x3
 2317 00df 0E       		.uleb128 0xe
 2318 00e0 3A       		.uleb128 0x3a
 2319 00e1 0B       		.uleb128 0xb
 2320 00e2 3B       		.uleb128 0x3b
 2321 00e3 05       		.uleb128 0x5
 2322 00e4 27       		.uleb128 0x27
 2323 00e5 19       		.uleb128 0x19
 2324 00e6 49       		.uleb128 0x49
 2325 00e7 13       		.uleb128 0x13
 2326 00e8 11       		.uleb128 0x11
 2327 00e9 01       		.uleb128 0x1
 2328 00ea 12       		.uleb128 0x12
 2329 00eb 06       		.uleb128 0x6
 2330 00ec 40       		.uleb128 0x40
 2331 00ed 18       		.uleb128 0x18
 2332 00ee 9742     		.uleb128 0x2117
 2333 00f0 19       		.uleb128 0x19
 2334 00f1 01       		.uleb128 0x1
 2335 00f2 13       		.uleb128 0x13
 2336 00f3 00       		.byte	0
 2337 00f4 00       		.byte	0
 2338 00f5 0E       		.uleb128 0xe
 2339 00f6 34       		.uleb128 0x34
 2340 00f7 00       		.byte	0
 2341 00f8 03       		.uleb128 0x3
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 70


 2342 00f9 0E       		.uleb128 0xe
 2343 00fa 3A       		.uleb128 0x3a
 2344 00fb 0B       		.uleb128 0xb
 2345 00fc 3B       		.uleb128 0x3b
 2346 00fd 05       		.uleb128 0x5
 2347 00fe 49       		.uleb128 0x49
 2348 00ff 13       		.uleb128 0x13
 2349 0100 02       		.uleb128 0x2
 2350 0101 18       		.uleb128 0x18
 2351 0102 00       		.byte	0
 2352 0103 00       		.byte	0
 2353 0104 0F       		.uleb128 0xf
 2354 0105 2E       		.uleb128 0x2e
 2355 0106 00       		.byte	0
 2356 0107 3F       		.uleb128 0x3f
 2357 0108 19       		.uleb128 0x19
 2358 0109 03       		.uleb128 0x3
 2359 010a 0E       		.uleb128 0xe
 2360 010b 3A       		.uleb128 0x3a
 2361 010c 0B       		.uleb128 0xb
 2362 010d 3B       		.uleb128 0x3b
 2363 010e 05       		.uleb128 0x5
 2364 010f 27       		.uleb128 0x27
 2365 0110 19       		.uleb128 0x19
 2366 0111 49       		.uleb128 0x49
 2367 0112 13       		.uleb128 0x13
 2368 0113 11       		.uleb128 0x11
 2369 0114 01       		.uleb128 0x1
 2370 0115 12       		.uleb128 0x12
 2371 0116 06       		.uleb128 0x6
 2372 0117 40       		.uleb128 0x40
 2373 0118 18       		.uleb128 0x18
 2374 0119 9642     		.uleb128 0x2116
 2375 011b 19       		.uleb128 0x19
 2376 011c 00       		.byte	0
 2377 011d 00       		.byte	0
 2378 011e 10       		.uleb128 0x10
 2379 011f 2E       		.uleb128 0x2e
 2380 0120 01       		.byte	0x1
 2381 0121 3F       		.uleb128 0x3f
 2382 0122 19       		.uleb128 0x19
 2383 0123 03       		.uleb128 0x3
 2384 0124 0E       		.uleb128 0xe
 2385 0125 3A       		.uleb128 0x3a
 2386 0126 0B       		.uleb128 0xb
 2387 0127 3B       		.uleb128 0x3b
 2388 0128 05       		.uleb128 0x5
 2389 0129 27       		.uleb128 0x27
 2390 012a 19       		.uleb128 0x19
 2391 012b 11       		.uleb128 0x11
 2392 012c 01       		.uleb128 0x1
 2393 012d 12       		.uleb128 0x12
 2394 012e 06       		.uleb128 0x6
 2395 012f 40       		.uleb128 0x40
 2396 0130 18       		.uleb128 0x18
 2397 0131 9642     		.uleb128 0x2116
 2398 0133 19       		.uleb128 0x19
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 71


 2399 0134 01       		.uleb128 0x1
 2400 0135 13       		.uleb128 0x13
 2401 0136 00       		.byte	0
 2402 0137 00       		.byte	0
 2403 0138 11       		.uleb128 0x11
 2404 0139 0F       		.uleb128 0xf
 2405 013a 00       		.byte	0
 2406 013b 0B       		.uleb128 0xb
 2407 013c 0B       		.uleb128 0xb
 2408 013d 49       		.uleb128 0x49
 2409 013e 13       		.uleb128 0x13
 2410 013f 00       		.byte	0
 2411 0140 00       		.byte	0
 2412 0141 12       		.uleb128 0x12
 2413 0142 26       		.uleb128 0x26
 2414 0143 00       		.byte	0
 2415 0144 49       		.uleb128 0x49
 2416 0145 13       		.uleb128 0x13
 2417 0146 00       		.byte	0
 2418 0147 00       		.byte	0
 2419 0148 13       		.uleb128 0x13
 2420 0149 0B       		.uleb128 0xb
 2421 014a 01       		.byte	0x1
 2422 014b 11       		.uleb128 0x11
 2423 014c 01       		.uleb128 0x1
 2424 014d 12       		.uleb128 0x12
 2425 014e 06       		.uleb128 0x6
 2426 014f 00       		.byte	0
 2427 0150 00       		.byte	0
 2428 0151 14       		.uleb128 0x14
 2429 0152 34       		.uleb128 0x34
 2430 0153 00       		.byte	0
 2431 0154 03       		.uleb128 0x3
 2432 0155 0E       		.uleb128 0xe
 2433 0156 3A       		.uleb128 0x3a
 2434 0157 0B       		.uleb128 0xb
 2435 0158 3B       		.uleb128 0x3b
 2436 0159 0B       		.uleb128 0xb
 2437 015a 49       		.uleb128 0x49
 2438 015b 13       		.uleb128 0x13
 2439 015c 3F       		.uleb128 0x3f
 2440 015d 19       		.uleb128 0x19
 2441 015e 02       		.uleb128 0x2
 2442 015f 18       		.uleb128 0x18
 2443 0160 00       		.byte	0
 2444 0161 00       		.byte	0
 2445 0162 00       		.byte	0
 2446              		.section	.debug_aranges,"",%progbits
 2447 0000 EC000000 		.4byte	0xec
 2448 0004 0200     		.2byte	0x2
 2449 0006 00000000 		.4byte	.Ldebug_info0
 2450 000a 04       		.byte	0x4
 2451 000b 00       		.byte	0
 2452 000c 0000     		.2byte	0
 2453 000e 0000     		.2byte	0
 2454 0010 00000000 		.4byte	.LFB0
 2455 0014 24000000 		.4byte	.LFE0-.LFB0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 72


 2456 0018 00000000 		.4byte	.LFB1
 2457 001c 3C000000 		.4byte	.LFE1-.LFB1
 2458 0020 00000000 		.4byte	.LFB2
 2459 0024 64000000 		.4byte	.LFE2-.LFB2
 2460 0028 00000000 		.4byte	.LFB3
 2461 002c 64000000 		.4byte	.LFE3-.LFB3
 2462 0030 00000000 		.4byte	.LFB4
 2463 0034 0C000000 		.4byte	.LFE4-.LFB4
 2464 0038 00000000 		.4byte	.LFB5
 2465 003c 14000000 		.4byte	.LFE5-.LFB5
 2466 0040 00000000 		.4byte	.LFB6
 2467 0044 20000000 		.4byte	.LFE6-.LFB6
 2468 0048 00000000 		.4byte	.LFB7
 2469 004c 20000000 		.4byte	.LFE7-.LFB7
 2470 0050 00000000 		.4byte	.LFB8
 2471 0054 24000000 		.4byte	.LFE8-.LFB8
 2472 0058 00000000 		.4byte	.LFB9
 2473 005c 4C000000 		.4byte	.LFE9-.LFB9
 2474 0060 00000000 		.4byte	.LFB10
 2475 0064 22000000 		.4byte	.LFE10-.LFB10
 2476 0068 00000000 		.4byte	.LFB11
 2477 006c 30000000 		.4byte	.LFE11-.LFB11
 2478 0070 00000000 		.4byte	.LFB12
 2479 0074 48000000 		.4byte	.LFE12-.LFB12
 2480 0078 00000000 		.4byte	.LFB13
 2481 007c 14000000 		.4byte	.LFE13-.LFB13
 2482 0080 00000000 		.4byte	.LFB14
 2483 0084 20000000 		.4byte	.LFE14-.LFB14
 2484 0088 00000000 		.4byte	.LFB15
 2485 008c 20000000 		.4byte	.LFE15-.LFB15
 2486 0090 00000000 		.4byte	.LFB16
 2487 0094 20000000 		.4byte	.LFE16-.LFB16
 2488 0098 00000000 		.4byte	.LFB17
 2489 009c 2C000000 		.4byte	.LFE17-.LFB17
 2490 00a0 00000000 		.4byte	.LFB18
 2491 00a4 14000000 		.4byte	.LFE18-.LFB18
 2492 00a8 00000000 		.4byte	.LFB19
 2493 00ac 34000000 		.4byte	.LFE19-.LFB19
 2494 00b0 00000000 		.4byte	.LFB20
 2495 00b4 58000000 		.4byte	.LFE20-.LFB20
 2496 00b8 00000000 		.4byte	.LFB21
 2497 00bc 5C000000 		.4byte	.LFE21-.LFB21
 2498 00c0 00000000 		.4byte	.LFB22
 2499 00c4 38000000 		.4byte	.LFE22-.LFB22
 2500 00c8 00000000 		.4byte	.LFB23
 2501 00cc 48000000 		.4byte	.LFE23-.LFB23
 2502 00d0 00000000 		.4byte	.LFB24
 2503 00d4 48000000 		.4byte	.LFE24-.LFB24
 2504 00d8 00000000 		.4byte	.LFB25
 2505 00dc B8000000 		.4byte	.LFE25-.LFB25
 2506 00e0 00000000 		.4byte	.LFB26
 2507 00e4 14000000 		.4byte	.LFE26-.LFB26
 2508 00e8 00000000 		.4byte	0
 2509 00ec 00000000 		.4byte	0
 2510              		.section	.debug_ranges,"",%progbits
 2511              	.Ldebug_ranges0:
 2512 0000 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 73


 2513 0004 24000000 		.4byte	.LFE0
 2514 0008 00000000 		.4byte	.LFB1
 2515 000c 3C000000 		.4byte	.LFE1
 2516 0010 00000000 		.4byte	.LFB2
 2517 0014 64000000 		.4byte	.LFE2
 2518 0018 00000000 		.4byte	.LFB3
 2519 001c 64000000 		.4byte	.LFE3
 2520 0020 00000000 		.4byte	.LFB4
 2521 0024 0C000000 		.4byte	.LFE4
 2522 0028 00000000 		.4byte	.LFB5
 2523 002c 14000000 		.4byte	.LFE5
 2524 0030 00000000 		.4byte	.LFB6
 2525 0034 20000000 		.4byte	.LFE6
 2526 0038 00000000 		.4byte	.LFB7
 2527 003c 20000000 		.4byte	.LFE7
 2528 0040 00000000 		.4byte	.LFB8
 2529 0044 24000000 		.4byte	.LFE8
 2530 0048 00000000 		.4byte	.LFB9
 2531 004c 4C000000 		.4byte	.LFE9
 2532 0050 00000000 		.4byte	.LFB10
 2533 0054 22000000 		.4byte	.LFE10
 2534 0058 00000000 		.4byte	.LFB11
 2535 005c 30000000 		.4byte	.LFE11
 2536 0060 00000000 		.4byte	.LFB12
 2537 0064 48000000 		.4byte	.LFE12
 2538 0068 00000000 		.4byte	.LFB13
 2539 006c 14000000 		.4byte	.LFE13
 2540 0070 00000000 		.4byte	.LFB14
 2541 0074 20000000 		.4byte	.LFE14
 2542 0078 00000000 		.4byte	.LFB15
 2543 007c 20000000 		.4byte	.LFE15
 2544 0080 00000000 		.4byte	.LFB16
 2545 0084 20000000 		.4byte	.LFE16
 2546 0088 00000000 		.4byte	.LFB17
 2547 008c 2C000000 		.4byte	.LFE17
 2548 0090 00000000 		.4byte	.LFB18
 2549 0094 14000000 		.4byte	.LFE18
 2550 0098 00000000 		.4byte	.LFB19
 2551 009c 34000000 		.4byte	.LFE19
 2552 00a0 00000000 		.4byte	.LFB20
 2553 00a4 58000000 		.4byte	.LFE20
 2554 00a8 00000000 		.4byte	.LFB21
 2555 00ac 5C000000 		.4byte	.LFE21
 2556 00b0 00000000 		.4byte	.LFB22
 2557 00b4 38000000 		.4byte	.LFE22
 2558 00b8 00000000 		.4byte	.LFB23
 2559 00bc 48000000 		.4byte	.LFE23
 2560 00c0 00000000 		.4byte	.LFB24
 2561 00c4 48000000 		.4byte	.LFE24
 2562 00c8 00000000 		.4byte	.LFB25
 2563 00cc B8000000 		.4byte	.LFE25
 2564 00d0 00000000 		.4byte	.LFB26
 2565 00d4 14000000 		.4byte	.LFE26
 2566 00d8 00000000 		.4byte	0
 2567 00dc 00000000 		.4byte	0
 2568              		.section	.debug_line,"",%progbits
 2569              	.Ldebug_line0:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 74


 2570 0000 DE020000 		.section	.debug_str,"MS",%progbits,1
 2570      02004100 
 2570      00000201 
 2570      FB0E0D00 
 2570      01010101 
 2571              	.LASF10:
 2572 0000 75696E74 		.ascii	"uint16\000"
 2572      313600
 2573              	.LASF45:
 2574 0007 74784461 		.ascii	"txDataByte\000"
 2574      74614279 
 2574      746500
 2575              	.LASF49:
 2576 0012 73747269 		.ascii	"string\000"
 2576      6E6700
 2577              	.LASF7:
 2578 0019 6C6F6E67 		.ascii	"long long unsigned int\000"
 2578      206C6F6E 
 2578      6720756E 
 2578      7369676E 
 2578      65642069 
 2579              	.LASF18:
 2580 0030 55415254 		.ascii	"UART_Start\000"
 2580      5F537461 
 2580      727400
 2581              	.LASF43:
 2582 003b 55415254 		.ascii	"UART_SetTxInterruptMode\000"
 2582      5F536574 
 2582      5478496E 
 2582      74657272 
 2582      7570744D 
 2583              	.LASF6:
 2584 0053 6C6F6E67 		.ascii	"long long int\000"
 2584      206C6F6E 
 2584      6720696E 
 2584      7400
 2585              	.LASF0:
 2586 0061 7369676E 		.ascii	"signed char\000"
 2586      65642063 
 2586      68617200 
 2587              	.LASF59:
 2588 006d 74785065 		.ascii	"txPeriod\000"
 2588      72696F64 
 2588      00
 2589              	.LASF4:
 2590 0076 6C6F6E67 		.ascii	"long int\000"
 2590      20696E74 
 2590      00
 2591              	.LASF47:
 2592 007f 55415254 		.ascii	"UART_PutChar\000"
 2592      5F507574 
 2592      43686172 
 2592      00
 2593              	.LASF28:
 2594 008c 55415254 		.ascii	"UART_ReadRxData\000"
 2594      5F526561 
 2594      64527844 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 75


 2594      61746100 
 2595              	.LASF9:
 2596 009c 75696E74 		.ascii	"uint8\000"
 2596      3800
 2597              	.LASF33:
 2598 00a2 55415254 		.ascii	"UART_ReadControlRegister\000"
 2598      5F526561 
 2598      64436F6E 
 2598      74726F6C 
 2598      52656769 
 2599              	.LASF12:
 2600 00bb 646F7562 		.ascii	"double\000"
 2600      6C6500
 2601              	.LASF39:
 2602 00c2 61646472 		.ascii	"addressMode\000"
 2602      6573734D 
 2602      6F646500 
 2603              	.LASF25:
 2604 00ce 636F6E74 		.ascii	"control\000"
 2604      726F6C00 
 2605              	.LASF19:
 2606 00d6 55415254 		.ascii	"UART_Init\000"
 2606      5F496E69 
 2606      7400
 2607              	.LASF57:
 2608 00e0 7265744D 		.ascii	"retMode\000"
 2608      6F646500 
 2609              	.LASF34:
 2610 00e8 55415254 		.ascii	"UART_GetByte\000"
 2610      5F476574 
 2610      42797465 
 2610      00
 2611              	.LASF8:
 2612 00f5 756E7369 		.ascii	"unsigned int\000"
 2612      676E6564 
 2612      20696E74 
 2612      00
 2613              	.LASF55:
 2614 0102 55415254 		.ascii	"UART_ClearTxBuffer\000"
 2614      5F436C65 
 2614      61725478 
 2614      42756666 
 2614      657200
 2615              	.LASF53:
 2616 0115 55415254 		.ascii	"UART_PutCRLF\000"
 2616      5F507574 
 2616      43524C46 
 2616      00
 2617              	.LASF5:
 2618 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2618      20756E73 
 2618      69676E65 
 2618      6420696E 
 2618      7400
 2619              	.LASF51:
 2620 0134 55415254 		.ascii	"UART_PutArray\000"
 2620      5F507574 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 76


 2620      41727261 
 2620      7900
 2621              	.LASF36:
 2622 0142 73697A65 		.ascii	"size\000"
 2622      00
 2623              	.LASF3:
 2624 0147 73686F72 		.ascii	"short unsigned int\000"
 2624      7420756E 
 2624      7369676E 
 2624      65642069 
 2624      6E7400
 2625              	.LASF50:
 2626 015a 62756649 		.ascii	"bufIndex\000"
 2626      6E646578 
 2626      00
 2627              	.LASF26:
 2628 0163 696E7453 		.ascii	"intSrc\000"
 2628      726300
 2629              	.LASF60:
 2630 016a 55415254 		.ascii	"UART_SetTxAddressMode\000"
 2630      5F536574 
 2630      54784164 
 2630      64726573 
 2630      734D6F64 
 2631              	.LASF46:
 2632 0180 55415254 		.ascii	"UART_ReadTxStatus\000"
 2632      5F526561 
 2632      64547853 
 2632      74617475 
 2632      7300
 2633              	.LASF61:
 2634 0192 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2634      43313120 
 2634      352E342E 
 2634      31203230 
 2634      31363036 
 2635 01c5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2635      20726576 
 2635      6973696F 
 2635      6E203233 
 2635      37373135 
 2636 01f8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2636      66756E63 
 2636      74696F6E 
 2636      2D736563 
 2636      74696F6E 
 2637              	.LASF58:
 2638 0220 746D7053 		.ascii	"tmpStat\000"
 2638      74617400 
 2639              	.LASF17:
 2640 0228 73697A65 		.ascii	"sizetype\000"
 2640      74797065 
 2640      00
 2641              	.LASF16:
 2642 0231 6C6F6E67 		.ascii	"long double\000"
 2642      20646F75 
 2642      626C6500 
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 77


 2643              	.LASF41:
 2644 023d 61646472 		.ascii	"address\000"
 2644      65737300 
 2645              	.LASF40:
 2646 0245 55415254 		.ascii	"UART_SetRxAddress1\000"
 2646      5F536574 
 2646      52784164 
 2646      64726573 
 2646      733100
 2647              	.LASF42:
 2648 0258 55415254 		.ascii	"UART_SetRxAddress2\000"
 2648      5F536574 
 2648      52784164 
 2648      64726573 
 2648      733200
 2649              	.LASF32:
 2650 026b 72785374 		.ascii	"rxStatus\000"
 2650      61747573 
 2650      00
 2651              	.LASF11:
 2652 0274 666C6F61 		.ascii	"float\000"
 2652      7400
 2653              	.LASF54:
 2654 027a 55415254 		.ascii	"UART_GetTxBufferSize\000"
 2654      5F476574 
 2654      54784275 
 2654      66666572 
 2654      53697A65 
 2655              	.LASF15:
 2656 028f 72656738 		.ascii	"reg8\000"
 2656      00
 2657              	.LASF38:
 2658 0294 55415254 		.ascii	"UART_SetRxAddressMode\000"
 2658      5F536574 
 2658      52784164 
 2658      64726573 
 2658      734D6F64 
 2659              	.LASF1:
 2660 02aa 756E7369 		.ascii	"unsigned char\000"
 2660      676E6564 
 2660      20636861 
 2660      7200
 2661              	.LASF44:
 2662 02b8 55415254 		.ascii	"UART_WriteTxData\000"
 2662      5F577269 
 2662      74655478 
 2662      44617461 
 2662      00
 2663              	.LASF2:
 2664 02c9 73686F72 		.ascii	"short int\000"
 2664      7420696E 
 2664      7400
 2665              	.LASF56:
 2666 02d3 55415254 		.ascii	"UART_SendBreak\000"
 2666      5F53656E 
 2666      64427265 
 2666      616B00
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 78


 2667              	.LASF52:
 2668 02e2 62797465 		.ascii	"byteCount\000"
 2668      436F756E 
 2668      7400
 2669              	.LASF27:
 2670 02ec 72784461 		.ascii	"rxData\000"
 2670      746100
 2671              	.LASF20:
 2672 02f3 55415254 		.ascii	"UART_Enable\000"
 2672      5F456E61 
 2672      626C6500 
 2673              	.LASF29:
 2674 02ff 55415254 		.ascii	"UART_ReadRxStatus\000"
 2674      5F526561 
 2674      64527853 
 2674      74617475 
 2674      7300
 2675              	.LASF14:
 2676 0311 63686172 		.ascii	"char\000"
 2676      00
 2677              	.LASF63:
 2678 0316 433A5C55 		.ascii	"C:\\Users\\Larry\\Documents\\PSoC Creator\\bwsi\\UA"
 2678      73657273 
 2678      5C4C6172 
 2678      72795C44 
 2678      6F63756D 
 2679 0343 52545265 		.ascii	"RTReverse\\Workspace01\\UARTReverse.cydsn\000"
 2679      76657273 
 2679      655C576F 
 2679      726B7370 
 2679      61636530 
 2680              	.LASF13:
 2681 036b 63686172 		.ascii	"char8\000"
 2681      3800
 2682              	.LASF24:
 2683 0371 55415254 		.ascii	"UART_SetRxInterruptMode\000"
 2683      5F536574 
 2683      5278496E 
 2683      74657272 
 2683      7570744D 
 2684              	.LASF31:
 2685 0389 55415254 		.ascii	"UART_GetChar\000"
 2685      5F476574 
 2685      43686172 
 2685      00
 2686              	.LASF22:
 2687 0396 656E6162 		.ascii	"enableInterrupts\000"
 2687      6C65496E 
 2687      74657272 
 2687      75707473 
 2687      00
 2688              	.LASF64:
 2689 03a7 55415254 		.ascii	"UART_initVar\000"
 2689      5F696E69 
 2689      74566172 
 2689      00
 2690              	.LASF35:
ARM GAS  C:\Users\Larry\AppData\Local\Temp\ccPdfR45.s 			page 79


 2691 03b4 55415254 		.ascii	"UART_GetRxBufferSize\000"
 2691      5F476574 
 2691      52784275 
 2691      66666572 
 2691      53697A65 
 2692              	.LASF30:
 2693 03c9 73746174 		.ascii	"status\000"
 2693      757300
 2694              	.LASF21:
 2695 03d0 55415254 		.ascii	"UART_Stop\000"
 2695      5F53746F 
 2695      7000
 2696              	.LASF62:
 2697 03da 47656E65 		.ascii	"Generated_Source\\PSoC4\\UART.c\000"
 2697      72617465 
 2697      645F536F 
 2697      75726365 
 2697      5C50536F 
 2698              	.LASF48:
 2699 03f8 55415254 		.ascii	"UART_PutString\000"
 2699      5F507574 
 2699      53747269 
 2699      6E6700
 2700              	.LASF23:
 2701 0407 55415254 		.ascii	"UART_WriteControlRegister\000"
 2701      5F577269 
 2701      7465436F 
 2701      6E74726F 
 2701      6C526567 
 2702              	.LASF37:
 2703 0421 55415254 		.ascii	"UART_ClearRxBuffer\000"
 2703      5F436C65 
 2703      61725278 
 2703      42756666 
 2703      657200
 2704              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
